/* -*- C++ -*-
 *
 * File: IteratorFacadeFacade
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      The IteratorFacade template class implements an iterator
 *      with semantics defined for multiple dimensions. Its most obvious use
 *      is as the iterator for the MultiArray generic container, but it could
 *      be specialized to work for any multi-dimensional purpose.
 */

// Questions:
//      Conflict between using [] for axes and traditional ptr-style meaning
//      Good way to do n-D coordinates
// TODO: 


#pragma once
#ifndef INCA_UTIL_ITERATOR_MULTI_DIMENSIONAL
#define INCA_UTIL_ITERATOR_MULTI_DIMENSIONAL

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca utilities collection
namespace inca {
    // Forward declarations
    template <class MultiArrayType, typename ReturnType, bool reversed>
        class IteratorFacade;
};

// Import statically-sized Array class
#include <inca/util/Array>

// Implementation of IteratorFacade class
template <class Derived, typename Value, inca::SizeType dim>
class inca::IteratorFacade {
/*---------------------------------------------------------------------------*
 | Type & constant declarations
 *---------------------------------------------------------------------------*/
public:
    // How many dimensions do I have?
    static const SizeType dimensionality = dim;

    // Size/index types
    typedef typename Core::SizeType       SizeType;
    typedef typename Core::IndexType      IndexType;
    typedef typename Core::DifferenceType DifferenceType;

    // This iterator type
    typedef IteratorFacade<Derived, ElementType, dim, reversed>
        IteratorType;


    // Stateless inner class for stepping the owning iterator by some
    // number of elements along a single dimensional axis
    class AxisWalker;


/*---------------------------------------------------------------------------*
 | Constructors & accessors
 *---------------------------------------------------------------------------*/
public:
    // Default constructor
    explicit IteratorFacade()
            : _array(NULL), _index(-1) { }


    // Accessor functions
          AxisWalker & operator[](IndexType axis)       { return _axes[axis]; }
    const AxisWalker & operator[](IndexType axis) const { return _axes[axis]; }
    IndexType index() const { return _index; }

protected:
    IndexType   _indices;   // Where we are in the space
    Accessor *  _accessor;  // Where we get values from


/*---------------------------------------------------------------------------*
 | Operators
 *---------------------------------------------------------------------------*/
public:
    // Get a reference to the current element
    ReturnType & operator*() { return access(indices); }

    // Get a pointer to the current element
    ReturnType * operator->() { return & accessor(indices); }

    // Access to each axis
          AxisWalker operator[](IndexType axis)       { return AxisWalker(this, axis); }
    const AxisWalker operator[](IndexType axis) const { return AxisWalker(this, axis); }
};


// Implementation of AxisWalker inner class (inherits types from
// IteratorFacade)
template <class Acc, typename EType, inca::SizeType dim, bool reversed>
class inca::IteratorFacade<Acc, EType, dim, reversed>::AxisWalker {
/*---------------------------------------------------------------------------*
 | Constructors & accessors
 *---------------------------------------------------------------------------*/
public:
    // Default (no initialization) constructor
    AxisWalker() : _array(NULL), _iterator(NULL), _axis(0) { }

    // Copy constructor
/*    AxisWalker(const AxisWalker & w)
        : _array(const_cast<AxisWalker &>(w).array()),
          _iterator(const_cast<AxisWalker &>(w).iterator()),
          _axis(w.axis()) { }
*/
    AxisWalker(const AxisWalker & w)
        : _array(w._array),
          _iterator(w._iterator),
          _axis(w.axis()) { }

    // Constructor specifying iterator and axis
    AxisWalker(IteratorType & i, IndexType ax)
        : _array(&i.array()), _iterator(&i), _axis(ax) { }

    // Accessor functions
          MultiArray & array()       { return *_array; }
    const MultiArray & array() const { return *_array; }
          IteratorType & iterator()       { return *_iterator; }
    const IteratorType & iterator() const { return *_iterator; }
    IndexType axis() const { return _axis; }

    // Cast to numeric type
    operator IndexType() const { return _
protected:
    IteratorType *  _iterator;
    IndexType       _axis;


/*---------------------------------------------------------------------------*
 | Operators
 *---------------------------------------------------------------------------*/
public:
    // Prefix increment operator
    IteratorType & operator++() {
        if (reversed)   return iterator() -= array().stride(axis());
        else            return iterator() += array().stride(axis());
    }

    // Postfix increment operator
    IteratorType operator++(int) {
        IteratorType temp = iterator();
        if (reversed)   iterator() -= array().stride(axis());
        else            iterator() += array().stride(axis());
        return temp;
    }

    // Prefix decrement operator
    IteratorType & operator--() {
        if (reversed)   return iterator() += array().stride(axis());
        else            return iterator() -= array().stride(axis());
    }

    // Postfix decrement operator
    IteratorType operator--(int) {
        IteratorType temp = iterator();
        if (reversed)   iterator() += array().stride(axis());
        else            iterator() -= array().stride(axis());
        return temp;
    }

    // Computed add/assignment operator
    IteratorType & operator+=(DifferenceType n) {
        if (reversed)   return iterator() -= n * array().stride(axis());
        else            return iterator() += n * array().stride(axis());
    }

    // Computed subtract/assignment operator
    IteratorType & operator-=(DifferenceType n) {
        if (reversed)   return iterator() += n * array().stride(axis());
        else            return iterator() -= n * array().stride(axis());
    }
};


/*---------------------------------------------------------------------------*
 | AxisWalker non-member arithmetic operators
 *---------------------------------------------------------------------------*/
namespace inca {
    // AxisWalker/integer addition: w + n
    template <class A, typename RT, inca::SizeType dim, bool rev>
    inline IteratorFacade<A, RT, dim, rev>
    operator+(const typename IteratorFacade<A, RT, dim, rev>::AxisWalker &w,
              typename IteratorFacade<A, RT, dim, rev>::DifferenceType n) {
        IteratorFacade<A, RT, dim, rev> result = w.iterator();
        return result[w.axis()] += n;
    }

    // AxisWalker/integer addition: n + w
    template <class A, typename RT, inca::SizeType dim, bool rev>
    inline IteratorFacade<A, RT, dim, rev>
    operator+(typename IteratorFacade<A, RT, dim, rev>::DifferenceType n,
              const typename IteratorFacade<A, RT, dim, rev>::AxisWalker &w) {
        return w + n;
    }

    // AxisWalker/integer subtraction: w - n
    template <class A, typename RT, inca::SizeType dim, bool rev>
    inline IteratorFacade<A, RT, dim, rev>
    operator-(const typename IteratorFacade<A, RT, dim, rev>::AxisWalker &w,
              typename IteratorFacade<A, RT, dim, rev>::DifferenceType n) {
        IteratorFacade<A, RT, dim, rev> result = w.iterator();
        return result[w.axis()] -= n;
    }
};

#endif

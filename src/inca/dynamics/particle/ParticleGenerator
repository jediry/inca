/* -*- C++ -*-
 *
 * File: ParticleGenerator
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#pragma once
#ifndef INCA_DYNAMICS_PARTICLE_GENERATOR
#define INCA_DYNAMICS_PARTICLE_GENERATOR

// Import other important particle-sim parts
#include "Particle"
//#include "Force"
#include "ParticleSystem"

// This is part of the Inca dynamics library
namespace Inca {
    namespace Dynamics {
        // Forward declaration
        template <class Scalar, unsigned int dim> class ParticleGenerator;
    };
};

template <class Scalar, unsigned int dim>
class Inca::Dynamics::ParticleGenerator : protected Scalar {
private:
    // Convenience typedefs
    typedef ParticleSystem<Scalar, dim> ThisType;

public:
    // What dimensional space are we working in?
    const static unsigned int dimension = dim;

    // Template typedefs
    typedef Particle<Scalar, dim>           Particle;
    typedef typename Particle::scalar_t     scalar_t;
    typedef typename Particle::scalar_arg_t scalar_arg_t;
    typedef typename Particle::Point        Point;
    typedef typename Particle::Vector       Vector;

    typedef ParticleSystem<Scalar, dim>     ParticleSystem;

protected:
    Point position;                     // The generator's true position
    Vector up, right, front;            // The generator's true orientation
    scoped_array<Particle> particles;   // Our array of particles
    unsigned int numParticles;          // How many there are
    ParticleSystem &particleSystem;     // The simulation that manages them
    float lastGenerationTime;           // When we last birthed particles
    unsigned int currentIndex;          // Used to hunt for dead particles


/*---------------------------------------------------------------------------*
 | Constructors & Properties
 *---------------------------------------------------------------------------*/
public:
    // Default Initializer
    ParticleGenerator(ParticleSystem &ps, unsigned int n)
            : numParticles(n), particles(new Particle[n]),
              particleSystem(ps), lastGenerationTime(0), currentIndex(0),
              position(0, 0, 0), front(0, 1, 0), up(0, 0, 1), right(1, 0, 0) {
    
        // Start with all-dead particles
        for (unsigned int i = 0; i < n; i++) {
            particles[i].alive = false;
            particles[i].point = new Point();
        }
    }

    // Destructor
    ~ParticleGenerator() {
        // Remove the particles from the ParticleSystem
        for (unsigned int i = 0; i < numParticles; i++) {
            particleSystem.removeParticle(&particles[i]);
            delete particles[i].point;
        }
    }

    // Generator parameters
    PROPERTY(rate, scalar_t, scalar_t(1000), setRate);
    PROPERTY(positionStddev, scalar_t, scalar_t(0.5), setPositionStddev);
    PROPERTY(velocityMean, scalar_t, scalar_t(1), setVelocityMean);
    PROPERTY(velocityStddev, scalar_t, scalar_t(0.2), setVelocityStddev);
    PROPERTY(verticalAngleStddev, scalar_t, scalar_t(1), setVerticalAngleStddev);
    PROPERTY(horizontalAngleStddev, scalar_t, scalar_t(1), setHorizontalAngleStddev);
    PROPERTY(timeToLiveMean, scalar_t, scalar_t(1), setTimeToLiveMean);
    PROPERTY(timeToLiveStddev, scalar_t, scalar_t(1), setTimeToLiveStddev);
    PROPERTY(massMean, scalar_t, scalar_t(1), setMassMean);
    PROPERTY(massStddev, scalar_t, scalar_t(0.01), setMassStddev);
    PROPERTY(elasticityMean, scalar_t, scalar_t(0.5), setElasticityMean);
    PROPERTY(elasticityStddev, scalar_t, scalar_t(0.01), setElasticityStddev);
    PROPERTY(dragMean, scalar_t, scalar_t(1), setDragMean);
    PROPERTY(dragStddev, scalar_t, scalar_t(0.01), setDragStddev);

    // The generation function (should be called periodically)
    void generate(float currentTime) {
        float dt = currentTime - lastGenerationTime,
              genCount = dt * rate();
//        logger << "dt " << dt << ",  lastGenerationTime " << lastGenerationTime
//               << " genCount " << genCount;
//        logger.info();
        while (genCount >= 1) {
            genCount -= 1;
            lastGenerationTime = currentTime;
            Particle *p = nextDeadParticle();

            if (p == NULL) {
                logger << "ParticleGenerator: All particles in use -- "
                          "unable to generate new particle";
                logger.info();
            } else {
//                logger << "ParticleGenerator: Activating particle "
//                       << (int) (p - particles.get());
//                logger.debug();

                scalar_t ha = randomGaussian(0, horizontalAngleStddev());
                scalar_t va = randomGaussian(0, verticalAngleStddev());
                Vector v = front + ha * right + va * up;
                v.normalize();
                p->position = position + front * randomGaussian(0, positionStddev());
                p->velocity = v * randomGaussian(velocityMean(), velocityStddev());
                p->timeToLive = randomGaussian(timeToLiveMean(), timeToLiveStddev());
                p->expirationDate = currentTime + p->timeToLive;
                p->mass = randomGaussian(massMean(), massStddev());
                p->elasticity = randomGaussian(elasticityMean(), elasticityStddev());
                p->drag = randomGaussian(dragMean(), dragStddev());
                p->resting = false;
                p->hit = false;
                p->alive = true;

                particleSystem.addParticle(p);
            }
        }
    }

    // Search from our current position for the next non-living particle.
    // If we loop through the whole array, give up and return NULL
    Particle * nextDeadParticle() {
        unsigned int index = currentIndex;
        do {
            if (! particles[index].alive) {
                currentIndex = index;
                return &particles[index];       // Found one!
            }

            // Keep looking...
            index = (index + 1) % numParticles; // Loop around
        } while (index != currentIndex);

        return NULL;    // Rats. We failed.
    }
};

#endif

/** -*- C++ -*-
 *
 * \file Matrix
 *
 * \author Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      The Matrix template class is a two-dimensional scalar grid, possibly
 *      representing a geometric transformation. The usual matrix operations
 *      are defined for it.
 */

#pragma once
#ifndef INCA_MATH_LINALG_MATRIX
#define INCA_MATH_LINALG_MATRIX

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca math library
namespace inca {
    namespace math {
        // Forward declarations
        template <typename scalar, inca::SizeType maj, inca::SizeType min,
                  bool rowMajAccess = true, bool rowMajorStorage = true>
        class Matrix;
    };
};

// Import STL algorithms
#include <algorithm>

// Import scalar math implementation
#include "../scalar.hpp"

// Import superclass and related class definitions
#include <inca/util/Array>
#include "Point"
#include "Vector"

// Import multi-dimensional preprocessor metaprogramming macros
#include <inca/util/multi-dimensional-macros.hpp>


template <typename scalar, inca::SizeType _major, inca::SizeType _minor,
          bool _rowMajorAccess, bool _rowMajorStorage>
class inca::math::Matrix : public inca::Array<scalar, _major * _minor> {
/*---------------------------------------------------------------------------*
 | Type/constant declarations
 *---------------------------------------------------------------------------*/
public:
    static const SizeType dimensionality
        = Array<scalar, _major * _minor>::dimensionality;

    // Scalar typedefs
    INCA_MATH_SCALAR_TYPES(scalar, IS_WITHIN_TEMPLATE);

    // What size matrix, and what storage order are we working with?
    static const SizeType major = _major;
    static const SizeType minor = _minor;
    static const bool rowMajorAccess =   _rowMajorAccess;
    static const bool colMajorAccess = ! _rowMajorAccess;
    static const bool rowMajorStorage =   _rowMajorStorage;
    static const bool colMajorStorage = ! _rowMajorStorage;
    static const SizeType rows = rowMajorAccess ? major : minor;
    static const SizeType cols = colMajorAccess ? major : minor;


/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    /**
     * Default (no initialization) constructor.
     */
    explicit Matrix() { }

    /**
     * Initialization from another Matrix, possibly of a different scalar
     * type. The argument must be of the same dimensionality, and its
     * scalar type must be convertible to scalar_t.
     */
    template <typename scalar2, bool rowAccess2, bool rowStorage2>
    Matrix(const Matrix<scalar2, major, minor, rowAccess2, rowStorage2> &p) {
        std::copy(p.begin(), p.end(), this->begin());
    }

    /**
     * Initialization from an Array (or subclass).
     */
    explicit Matrix(const Array<scalar_t, dimensionality> &arr) {
        std::copy(arr.begin(), arr.end(), this->begin());
    }

    /**
     * C-style array constructor. The element type must be convertible to
     * scalar_t.
     */
    template <typename scalar2>
    explicit Matrix(scalar2 * arr) {
        std::copy(arr, arr + this->dimensionality, this->begin());
        // FIXME: this doesn't respect storage order
    }

    /**
     * C-style 2D array constructor. The element type must be convertible to
     * scalar_t
     */
    template <typename scalar2>
    explicit Matrix(scalar2 arr[major][minor]) {
        for (IndexType i = 0; i < major; i++)
            for (IndexType j = 0; j < minor; j++)
                at(indexOf(i, j)) = arr[i][j];
        // FIXME: this doesn't respect storage order
    }

    /**
     * Constant element initialization constructor
     */
    explicit Matrix(scalar_arg_t e) {
        std::fill_n(this->begin(), this->dimensionality, e);
    }

    /**
     * scalar_arg_t argument list constructors. Each of these is intended to
     * be used only with instances of the same dimensionality as there are
     * arguments. Attempting to invoke a constructor for a different
     * dimensionality will cause a compile-time failure.
     */
//    BOOST_PP_REPEAT_FROM_TO(MIN_DIMENSION * MIN_DIMENSION,
//                            MAX_DIMENSION * MAX_DIMENSION,
//                            PARAM_LIST_CONSTRUCTOR, Matrix);


    /**
     * 2D matrix-subscript element accessor.
     */
    const scalar_t & operator()(IndexType maj, IndexType min) const {
        return this->at(indexOf(maj, min));
    }
    scalar_t & operator()(IndexType maj, IndexType min) {
        return this->at(indexOf(maj, min));
    }

    /**
     * 2D, storage-order-independent element accessor.
     */
    const scalar_t & rowCol(IndexType r, IndexType c) const {
        return this->at(rowMajorStorage ? r * cols + c : c * rows + r);
    }
    scalar_t & rowCol(IndexType r, IndexType c) {
        return this->at(rowMajorStorage ? r * cols + c : c * rows + r);
    }

    /**
     * 2D, storage-order-independent element accessor.
     */
    const scalar_t & colRow(IndexType c, IndexType r) const {
        return rowCol(r, c);
    }
    scalar_t & colRow(IndexType c, IndexType r) {
        return rowCol(r, c);
    }

    /**
     * Calculate a 1D index into the underlying ScalarList from a pair of
     * major-axis, minor-axis subscripts.
     */
    IndexType indexOf(IndexType maj, IndexType min) const {
        if (rowMajorStorage == rowMajorAccess)  // Same access as storage
            return maj * minor + min;
        else
            return min * major + maj;
    }


/*---------------------------------------------------------------------------*
 | Type-conversion functions
 *---------------------------------------------------------------------------*/
public:
    /**
     * Cast to string representation.
     * \returns a string like "[1.4, 3.5]\n[0.0, 3.0]"
     */
    operator std::string() const {
        std::ostringstream ss;
        for (IndexType row = 0; row < rows; row++)
            // Stringify a single row in the matrix. This has to be done
            // differently, depending on the storage scheme
            if (colMajorStorage)
                ss << '[' << this->stringifyElements(row, cols, rows) << "]\n";
            else
                ss << '[' << this->stringifyElements(row * cols, cols, 1) << "]\n";
        return ss.str();
    }
};

// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_MULTI_DIM_MACROS
#include <inca/util/multi-dimensional-macros.hpp>

#endif

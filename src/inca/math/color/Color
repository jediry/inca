/* -*- C++ -*-
 *
 * File: Color
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#pragma once
#ifndef INCA_MATH_COLOR
#define INCA_MATH_COLOR

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca math library
namespace inca {
    namespace math {
        // Forward declarations
        template <typename scalar, class colorspace> class Color;
    };
};

// Import STL algorithms
#include <algorithm>

// Import scalar math implementation
#include "../scalar.hpp"

// Import superclass and related class definitions
#include <inca/util/Array>

// Import multi-dimensional preprocessor metaprogramming macros
#include <inca/util/multi-dimensional-macros.hpp>


template <typename Scalar, class CS>
class inca::math::Color : public inca::Array<Scalar, CS::channels> {
/*---------------------------------------------------------------------------*
 | Type & constant declarations
 *---------------------------------------------------------------------------*/
public:
    // Scalar typedefs
    INCA_MATH_SCALAR_TYPES(Scalar, IS_WITHIN_TEMPLATE);

    // What colorspace do I live in?
    typedef CS ColorSpace;


/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    /**
     * Default (no initialization) constructor.
     */
    explicit Color() { }

    /**
     * Initialization from another Color, possibly of a different scalar
     * type. The argument must be in the same ColorSpace, and its
     * scalar type must be convertible to scalar_t.
     */
    template <typename Scalar2>
    Color(const Color<Scalar2, ColorSpace> &c) {
        std::copy(c.begin(), c.end(), this->begin());
    }

    /**
     * Initialization from an Array (or subclass).
     */
    explicit Color(const Array<scalar_t, ColorSpace::channels> &arr) {
        std::copy(arr.begin(), arr.end(), this->begin());
    }

    /**
     * Constant element initialization constructor
     */
    explicit Color(scalar_arg_t e) {
        std::fill(this->begin(), this->end(), e);
    }

    /**
     * C-style array constructor. The element type must be convertible to
     * scalar_t.
     */
    template <typename Scalar2>
    explicit Color(Scalar2 * arr) {
        std::copy(arr, arr + ColorSpace::channels, this->begin());
    }

    /**
     * scalar_arg_t argument list constructors. Each of these is intended to
     * be used only with instances of the same dimensionality as there are
     * arguments. Attempting to invoke a constructor for a different
     * dimensionality will cause a compile-time failure.
     */
    #define CREATE_DIMENSIONAL_CONSTRUCTOR(DIM)                             \
        explicit Color(PARAMS(DIM, scalar_arg_t s))                         \
            : Array<scalar_t, ColorSpace::channels>(PARAMS(DIM, s)) { }
    FOR_ALL_DIMS(CREATE_DIMENSIONAL_CONSTRUCTOR);
    #undef CREATE_DIMENSIONAL_CONSTRUCTOR

    Color<Scalar, ColorSpace> & operator=(const Color<Scalar, ColorSpace> & c) {
        std::copy(c.begin(), c.end(), this->begin());
        return *this;
    }


/*---------------------------------------------------------------------------*
 | Type-conversion functions
 *---------------------------------------------------------------------------*/
public:
    // to-string Cast
    operator std::string() const {
        std::ostringstream str;
        str << "Color[" << ColorSpace::name() << "]: ("
            << this->stringifyElements() << ')';
        return str.str();
    }
};


// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_MULTI_DIM_MACROS
#include <inca/util/multi-dimensional-macros.hpp>

#endif

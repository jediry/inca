/* -*- C++ -*-
 *
 * File: ParametricCurve
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2002, Ryan L. Saunders. All rights reserved.
 * 
 * Description:
 *      The ParametricCurve template is the abstract superclass for all types
 *      of parametrically defined curves. Concrete subclasses must implement
 *      the following pure virtual functions:
 *          scalar_t getMinimumT()
 *          scalar_t getMaximumT()
 *          Point  evaluateCurve(scalar_t t)
 *          Vector evaluateTangent(scalar_t t)
 *          Vector evaluateNormal(scalar_t t)
 *
 *      The template is instantiated with a particular point type and vector
 *      type, which are the point/vector types that result from evaluating the
 *      curve's properties. This allows the same algorithms to be used for
 *      three-dimensional curves (e.g., a curve in space) and two-dimensional
 *      curves (e.g., a curve in the parameter domain of a surface patch).
 */

#pragma once
#ifndef INCA_MATH_PARAMETRIC_CURVE
#define INCA_MATH_PARAMETRIC_CURVE


// Import superclass definition
#include "../Shape"


// This is part of the Inca geometry library
namespace Inca {
    namespace Geometry {
        // Forward declaration
        template <class Scalar, unsigned int dim> class ParametricCurve;
    };
};


template <class Scalar, unsigned int dim>
class Inca::Geometry::ParametricCurve : public Shape<Scalar, dim> {
private:
    // Convenience typedefs
    typedef ParametricCurve<Scalar, dim>        ThisType;
    typedef Shape<Scalar, dim>                  Superclass;

public:
    // What dimensional space are we working in?
    const static unsigned int dimension = dim;

    // Template typedefs
    typedef typename Superclass::scalar_t       scalar_t;
    typedef typename Superclass::scalar_arg_t   scalar_arg_t;
    typedef typename Superclass::Point          Point;
    typedef typename Superclass::Vector         Vector;
    typedef typename Superclass::Ray            Ray;


/*---------------------------------------------------------------------------*
 | Abstract functions: must be implemented by subclasses
 *---------------------------------------------------------------------------*/
public:
    virtual scalar_t getMinimumT() = 0;
    virtual scalar_t getMaximumT() = 0;
    virtual Point  evaluateCurve(scalar_arg_t t) = 0;
    virtual Vector evaluateTangent(scalar_arg_t t) = 0;
    virtual Vector evaluateNormal(scalar_arg_t t) = 0;

protected:
    void clampToParameterDomain(scalar_t &t) {
        if (t < getMinimumT())
            t = getMinimumT();
        else if (t > getMaximumT())
            t = getMaximumT();
    }
};

#endif

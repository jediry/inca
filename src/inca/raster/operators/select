/*
 * File: select
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file implements a rectangular selection of a raster that is
 *      itself a raster. This is useful for reading/writing just a subregion
 *      of an image. The index range of the selected region can either stay
 *      the same as those of the selected cells, or it can be translated to
 *      the origin (such that whatever region you select, it still starts from
 *      (0,0,...)).
 */

#pragma once
#ifndef INCA_RASTER_OPERATOR_SELECT
#define INCA_RASTER_OPERATOR_SELECT

// Import operator base class and macros
#include "OperatorRasterBase"

// Import metaprogramming tools
#include <inca/util/multi-dimensional-macros.hpp>
#include <inca/util/metaprogramming/macros.hpp>


// This is part of the Inca raster processing library
namespace inca {
    namespace raster {

        // Selection operator
        template <typename R0>
        class SelectRegionOperatorRaster

        // FIXME: could I roll this functionality into the main macro?
        // FIXME: could I make this movable?
        : public OperatorRasterBase< SelectRegionOperatorRaster<R0>,
            RasterTags<FixedSizeRasterTag,
                       StationaryRasterTag,
                       typename R0::AccessTag,
                       true, UncheckedIndexingRasterTag>,
            RasterTypes< typename R0::ElementType,
                         raster_dimensionality<R0>::value,
                         typename R0::ReadWriteElementType,
                         typename R0::ReadableElementType,
                         typename R0::WritableElementType>,
            R0> {
        public:
            // Get types from the superclass
            INCA_RASTER_OPERATOR_IMPORT_TYPES(SelectRegionOperatorRaster<R0>)

            // Constructor taking a region
            template <typename S, typename I, typename D>
            SelectRegionOperatorRaster(const R0 & r,
                                       const inca::Region<dimensionality, S, I, D> & b,
                                       bool relocateToOrigin = true)
                    : OperatorBaseType(r, false),
                      relocate(relocateToOrigin) {
                // Set bounds then clip and translate
                this->_bounds = b;
                clipAndRelocate();
            }

            // Assignment operators (needed if writable)
            INCA_RASTER_ASSIGNMENT_OPERATORS

        protected:
            // Clip the selected boundaries by the source raster's boundaries
            // (unless it is ArbitrarySize) and relocate (if requested).
            void clipAndRelocate() {
                // If R0 is not arbitrary-size, it we want to shrink our
                // selected region to match the raster's boundaries. If it
                // is, we just keep things the way they are.
                if (! is_arbitrary_size_raster<R0>::value)
                    this->_bounds = intersectionOf(this->operand0.bounds(),
                                                   this->_bounds);

                // If we're supposed to relocate to zero, figure out
                // what that will take, then do it.
                if (relocate) {
                    for (IndexType d = 0; d < dimensionality; ++d)
                        translation[d] = - this->bounds().base(d);
                    this->_bounds.translate(translation);
                }
            }

            // Return an element from the underlying raster
            INCA_RASTER_OPERATOR_GET_ELEMENT_HEADER(indices) {
                if (relocate) {
                    // Undo the effects of bounds translation
                    IndexArray relocated(indices);
                    for (IndexType d = 0; d < dimensionality; ++d)
                        relocated[d] -= translation[d];
                    return const_cast<Operand0RasterType &>(this->operand0)(relocated);
                } else {
                    // Just pass the indices through
                    return const_cast<Operand0RasterType &>(this->operand0)(indices);
                }
            }

        protected:
            bool            relocate;       // Are we translating indices?
            DifferenceArray translation;    // How much we had to shift by
        };


        // Factory function implicitly taking the raster's bounds
        template <typename R0>
        SelectRegionOperatorRaster<R0> select(const R0 & r,
                                              bool relocate = true) {
            return SelectRegionOperatorRaster<R0>(r, r.bounds(), relocate);
        }

        // Factory function taking base and extent indices
        template <typename R0, class IndexList0, class IndexList1>
        SelectRegionOperatorRaster<R0> selectBE(const R0 & r,
                                                const IndexList0 & bs,
                                                const IndexList1 & ex,
                                                bool relocate = true) {
            typename R0::Region bounds;
            bounds.setBasesAndExtents(bs, ex);
            return SelectRegionOperatorRaster<R0>(r, bounds, relocate);
        }

        // Factory function taking base indices and sizes
        template <typename R0, class IndexList, class SizeList>
        SelectRegionOperatorRaster<R0> selectBS(const R0 & r,
                                                const IndexList & bs,
                                                const SizeList & sz,
                                                bool relocate = true) {
            typename R0::Region bounds;
            bounds.setBasesAndSizes(bs, sz);
            return SelectRegionOperatorRaster<R0>(r, bounds, relocate);
        }

        // Factory function taking center indices and sizes
        template <typename R0, class IndexList, class SizeList>
        SelectRegionOperatorRaster<R0> selectCS(const R0 & r,
                                                const IndexList & ct,
                                                const SizeList & sz,
                                                bool relocate = true) {
            typename R0::Region bounds;
            bounds.setCentersAndSizes(ct, sz);
            return SelectRegionOperatorRaster<R0>(r, bounds, relocate);
        }

        // Factory function taking sizes (implicitly starting from r's bases)
        template <typename R0, class SizeList>
        SelectRegionOperatorRaster<R0> select(const R0 & r,
                                              const SizeList & sz,
                                              bool relocate = true) {
            typename R0::Region bounds;
            bounds.setBasesAndSizes(r.bases(), sz);
            return SelectRegionOperatorRaster<R0>(r, bounds, relocate);
        }

        // Factory function taking a Region object
        template <typename R0, typename S, typename I, typename D>
        SelectRegionOperatorRaster<R0> select(const R0 & r,
                                              const inca::Region<R0::dimensionality, S, I, D> & b,
                                              bool relocate = true) {
            return SelectRegionOperatorRaster<R0>(r, b, relocate);
        }

    };
};


// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_MULTI_DIM_MACROS
#include <inca/util/multi-dimensional-macros.hpp>
#define UNDEFINE_INCA_METAPROGRAMMING_MACROS
#include <inca/util/metaprogramming/macros.hpp>

#endif


/* -*- C++ -*-
 *
 * File: MultiArrayRaster
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      The MultiArrayRaster template class implements the Raster
 *      interface for the inca::MultiArray multi-dimensional container.
 *
 *      This is the preferred implementation for in-memory Rasters, unless you
 *      need to interface with another image processing library (e.g.,
 *      ImageMagick or VIGRA) or to wrap really strange memory layouts (e.g.
 *      multi-band RGB). It supports arbitrary dimensionality, resizing,
 *      adjustable index bases, and user-configurable storage order.
 */

#pragma once
#ifndef INCA_RASTER_MULTI_ARRAY_RASTER
#define INCA_RASTER_MULTI_ARRAY_RASTER

// Import system configuration
#include <inca/inca-common.h>


// This is part of the Inca raster processing library
namespace inca {
    namespace raster {
        // Forward declarations
        template <typename T, inca::SizeType dim> class MultiArrayRaster;
    };
};


// Import container definition
#include <inca/util/MultiArray>

// Import RasterFacade
#include "RasterFacade"

// Import metaprogramming tools
#include <inca/util/metaprogramming/is_collection.hpp>

#include <inca/util/multi-dimensional-macros.hpp>
#include <inca/util/metaprogramming/macros.hpp>


template <typename T, inca::SizeType dim>
class inca::raster::MultiArrayRaster
            : public RasterFacade<MultiArrayRaster<T, dim>,
                                  RasterTags<MutableSizeRasterTag,
                                             MovableRasterTag,
                                             ReadWriteRasterTag>,
                                  RasterTypes<T, dim> > {
/*---------------------------------------------------------------------------*
 | Type & constant declarations
 *---------------------------------------------------------------------------*/
public:
    // Type definitions
    typedef MultiArrayRaster<T, dim>                ThisType;
    typedef RasterTypes<T, dim>                     Types;
    typedef MultiArray<T, dim>                      MultiArrayType;
    typedef typename MultiArrayType::StorageOrder   StorageOrder;
    typedef shared_ptr<MultiArrayType>              MultiArrayPtr;

    // Imported types
    typedef typename Types::ElementType     ElementType;
    typedef typename Types::ConstReference  ConstReference;
    typedef typename Types::ConstPointer    ConstPointer;
    typedef typename Types::Pointer         Pointer;
    typedef typename Types::Region          Region;


/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    // Default (no initialization) constructor
    explicit MultiArrayRaster(const StorageOrder & so = FortranStorageOrder())
        : _array(new MultiArrayType(so)) { }

    // Copy constructor -- just copy shared_ptr
    MultiArrayRaster(const ThisType & r)
        : _array(r._array) { }

    // Implicit Raster conversion constructor
    template <typename R0>
    MultiArrayRaster(const R0 & r,
                     const StorageOrder & so = FortranStorageOrder(),
                     ENABLE_FUNCTION_IF(is_raster<R0>))
            : _array(new MultiArrayType(so)) {
        this->assignRaster(r);
    }

    // Arbitrary-dimensional constructor
    template <class SizeList>
    explicit MultiArrayRaster(const SizeList & sz,
                              const StorageOrder & so = FortranStorageOrder(),
                              ENABLE_FUNCTION_IF( AND2(is_collection<SizeList>,
                                                       NOT(is_raster<SizeList>))))
        : _array(new MultiArrayType(sz, so)) { }

    /**
     * Parameter list constructors giving the size along each dimension.
     * Each of these is intended to be used only with instances of the
     * appropriate rank (calling a constructor of the wrong rank will cause
     * a compile-time assert).
     */
    #define CREATE_DIMENSIONAL_CONSTRUCTOR(DIM)                             \
        explicit MultiArrayRaster(PARAMS(DIM, SizeType e),                  \
                        const StorageOrder & so = FortranStorageOrder())    \
                : _array(new MultiArrayType(PARAMS(DIM, e), so)) {          \
            BOOST_STATIC_ASSERT(ThisType::dimensionality == DIM);           \
        }
    FOR_ALL_DIMS(CREATE_DIMENSIONAL_CONSTRUCTOR);
    #undef CREATE_DIMENSIONAL_CONSTRUCTOR

    // Constructor taking a Region object
    explicit MultiArrayRaster(const Region & b,
                              const StorageOrder & so = FortranStorageOrder())
        : _array(new MultiArrayType(b, so)) { }

protected:
    MultiArrayPtr _array;           // Pointer to the MultiArray
    mutable ElementType _dummy;     // Used when we go out of bounds


/*---------------------------------------------------------------------------*
 | Assignment operator overloads
 *---------------------------------------------------------------------------*/
public:
    INCA_RASTER_ASSIGNMENT_OPERATORS


/*---------------------------------------------------------------------------*
 | Utility functions (not required by any Raster concept)
 *---------------------------------------------------------------------------*/
public:
    // Swap internal smart-pointers
    void swap(ThisType & r) { _array.swap(r._array); }

    // Public access to the underlying MultiArray object (const only)
    const MultiArrayType & array() const { return *_array; }
    ConstPointer elements() const { return array().elements(); }

//    MultiArrayType & array() { return *_array; }
    Pointer elements() { return _array->elements(); }


/*---------------------------------------------------------------------------*
 | Core functions required by RasterFacade
 *---------------------------------------------------------------------------*/
protected:
    // Allow RasterFacade to call these protected functions
    friend class RasterCoreAccess;

    // Functions required by RasterBoundsFacet
    const Region & getRasterBounds() const { return this->array().bounds(); }

    template <class SizeList>
    void setRasterSizes(const SizeList & sz) {
        this->_array->setSizes(sz);
    }
    template <class IndexList>
    void setRasterBases(const IndexList & bs) {
        this->_array->setBases(bs);
    }
    template <class IndexList>
    void setRasterExtents(const IndexList & ex) {
        this->_array->setExtents(ex);
    }
    template <class IndexList1, class IndexList2>
    void setRasterBounds(const IndexList1 & bs, const IndexList2 & ex) {
        this->_array->setBounds(bs, ex);
    }
    void setRasterBounds(const Region & b) {
        this->_array->setBounds(b);
    }

    // Functions required by RasterAccessFacet
    template <class IndexList, typename ReturnType>
    ReturnType getElement(const IndexList & indices) const {
        return ReturnType((*_array)(indices));
    }
    template <typename ReturnType>
    ReturnType getDummyElement(ConstReference value) const {
        _dummy = value;     // Copy over the value
        return _dummy;      // Return the dummy element
    }
};


// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_MULTI_DIM_MACROS
#include <inca/util/multi-dimensional-macros.hpp>
#define UNDEFINE_INCA_METAPROGRAMMING_MACROS
#include <inca/util/metaprogramming/macros.hpp>

#endif

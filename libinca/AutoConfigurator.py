import datetime
import re
from SCons import *

class AutoConfigurator:
    "A more autoconf-like Configure"


    # Mappings of name -> True/False indicating whether the entity was found
    headers = {}
    libs = {}


    def __init__(self, conf):
        self.configure = conf

    def CheckHeader(self, header, language = 'C'):
        self.headers[header] = self.configure.CheckHeader(header, language = language)
        return self.headers[header]

    def CheckLib(self, lib):
        self.libs[lib] = self.configure.CheckLib(lib)
        return self.libs[lib]

    def RequireHeader(self, header, msg = None, language = 'C'):
        if not self.CheckHeader(header, language = language):
            if msg != None:
                print msg
            else:
                print "Failed to locate required header '" + header + "'"
            self.configure.env.Exit(1)

    def RequireLib(self, lib, msg = None):
        if not self.CheckLib(lib):
            if msg != None:
                print msg
            else:
                print "Failed to locate required lib '" + lib + "'"
            self.configure.env.Exit(1)

    def MakePreprocessorIdentifier(self, name):
        "Convert 'name' into a C preprocessor-safe identifier"
        return 'HAVE_' + re.sub('[^A-Z0-9_]', '_', name.upper())

    def GenerateConfigHeader(self, header):
        print "Generating " + header

        config_h = file(str(header), "w")
#        date = datetime.datetime.now().strftime("%a, %d %b %Y %H:%M:%S")
        config_h.write("/* " + header + "\n" \
                       " *\n" \
#                       " * Generated by AutoConfigurator at " + date + "\n" \
                       " * This file is generated automatically. Do not edit it, as your\n" \
                       " * changes may be lost.\n" \
                       " */\n" \
                       "\n")

        for header, result in self.headers.iteritems():
            cpp_symbol = self.MakePreprocessorIdentifier(header)
            if result:
                config_h.write("#define " + cpp_symbol + " 1\n")
            else:
                config_h.write("//#undef " + cpp_symbol + "\n")

        for lib, result in self.libs.iteritems():
            cpp_symbol = self.MakePreprocessorIdentifier('lib' + lib)
            if result:
                config_h.write("#define " + cpp_symbol + " 1\n")
            else:
                config_h.write("//#undef " + cpp_symbol + "\n")

        config_h.close()



/* -*- C++ -*-
 *
 * File: SystemState
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      In order to calculate the dynamic properties of current and future
 *      configurations of the objects in our system, we need some place to
 *      put that information. The contents of the state for an individual
 *      object differs depending on the object type, so the atomic State
 *      objects are imported from within the object definitions.
 *
 *      The StateVector template class is an aggregate of these atomic states,
 *      with the number of contained elemental states being specified as a
 *      template parameter.
 *
 *      The SystemState template class is thin wrapper around a StateVector,
 *      allowing the more complicated semantics of acquiring and releasing
 *      pooled StateVector objects to be hidden behind the simpler semantics
 *      of creating and destroying small, local variables. This allows the
 *      ODE solver to be written as a simple mathematical expression, without
 *      incurring a large performance penalty due to memory allocation.
 */

#ifndef INCA_DYNAMIC_SYSTEM_STATE
#define INCA_DYNAMIC_SYSTEM_STATE

// This is part of the Inca dynamics library
namespace Inca {
    namespace Dynamics {
        // Forward declaration
        template <class DynObj, unsigned int n> class StateVector;
        template <class DynObj> class StateVectorProxy;
    };
};

// Import object_pool definition
#include <util/object_pool>


/*****************************************************************************
 * A StateVector is an array of individual States, and 
 *****************************************************************************/
template <class State, unsigned int n>
class Inca::Dynamics::StateVector {
private:
    // Convenience typedefs
    typedef StateVector<State, n> ThisType;

public:
    // Template typedefs
    typedef typename State::Object          Object;
    typedef typename Object::scalar_t       scalar_t;
    typedef typename Object::scalar_arg_t   scalar_arg_t;


/*---------------------------------------------------------------------------*
 | Constructors & Data
 *---------------------------------------------------------------------------*/
public:
    explicit StateVector() : _size(0) { }

protected:
    size_t _size;       // The number of valid states in this vector
    State states[n];    // The state objects (some may be unused)


/*---------------------------------------------------------------------------*
 | Individual state object management
 *---------------------------------------------------------------------------*/
public:
    // Query used and total size for the state vector
    size_t size()     const { return _size; }
    size_t capacity() const { return n; }
    bool   empty()    const { return size() == 0; }
    bool   full()     const { return size() == capacity(); }

    // Change the size of the state vector
    void clear() { setSize(0); }
    void setSize(size_t s) {
        if (s <= capacity())
            _size = s;
        else
            _size = capacity();
    }

    // Access to an individual state object
          State & operator[](index_t i)       { return (states)[i]; }
    const State & operator[](index_t i) const { return (states)[i]; }


/*---------------------------------------------------------------------------*
 | Macro-assignment operators
 *---------------------------------------------------------------------------*/
public:
    // State (+)accumulation assignment
    ThisType & operator+=(const ThisType &s) {
        for (index_t i = 0; i < _size; i++)
            states[i] += s[i];
        return *this;
    }

    // State (-)accumulation assignment
    ThisType & operator-=(const ThisType &s) {
        for (index_t i = 0; i < _size; i++)
            states[i] -= s[i];
        return *this;
    }

    // Scalar multiplication assignment
    ThisType & operator*=(scalar_arg_t s) {
        for (index_t i = 0; i < _size; i++)
            states[i] *= s;
        return *this;
    }

    // Scalar division assignment
    ThisType & operator/=(scalar_arg_t s) {
        for (index_t i = 0; i < _size; i++)
            states[i] /= s;
        return *this;
    }
};


/*****************************************************************************
 * A StateVectorProxy represents the state of a dynamic system at a
 * particular point in time, and is a lightweight wrapper around a
 * StateVector, allowing large StateVectors to be used in normal mathematical
 * expressions, without incurring the performance cost of constructing and
 * destroying large objects.
 *****************************************************************************/
template <class State>
class Inca::Dynamics::StateVectorProxy {
private:
    // Convenience typedefs
    typedef StateVectorProxy<State> ThisType;

public:
    // Template typedefs
    typedef typename State::Object                  Object;
    typedef StateVector<State, Object::MAX_OBJECTS> StateVector;
    typedef object_pool<StateVector>                StateVectorPool;
    typedef typename StateVectorPool::pointer       StateVectorPtr;

    typedef typename Object::scalar_t               scalar_t;
    typedef typename Object::scalar_arg_t           scalar_arg_t;


/*---------------------------------------------------------------------------*
 | Static allocation of state vectors -- all SystemStates of this class
 | draw their memory allocation from this pool.
 *---------------------------------------------------------------------------*/
protected:
    static StateVectorPool stateVectorPool;


/*---------------------------------------------------------------------------*
 | Constructors & data
 *---------------------------------------------------------------------------*/
public:
    // Constructor
    explicit StateVectorProxy(scalar_arg_t t, size_t sz) : _time(t) {
        _objectStates = stateVectorPool.acquire();   // Get me a state vector
        setSize(sz);
    }

    // Copy constructor -- Warning! Transfers ownership of state vector!!
    StateVectorProxy(const ThisType &s) : _time(s._time) {
        _objectStates = s._objectStates;
        s._objectStates = NULL;
    }

    // Destructor
    ~StateVectorProxy() {
        // If we've not surrendered ownership of the state vector (i.e., via
        // the copy-constructor), we need to give it back to the pool now
        if (_objectStates != NULL)
            stateVectorPool.release(_objectStates);
    }

protected:
    mutable StateVectorPtr _objectStates;


/*---------------------------------------------------------------------------*
 | The simulation time to which this state pertains
 *---------------------------------------------------------------------------*/
public:
    scalar_t time() const { return _time; }
    void setTime(scalar_arg_t t) { _time = t; }

protected:
    scalar_t _time;


/*---------------------------------------------------------------------------*
 | Individual state object management
 *---------------------------------------------------------------------------*/
public:
    // Query used and total size for the state vector
    size_t size()     const { return _objectStates->size(); }
    size_t capacity() const { return _objectStates->capacity(); }
    bool   empty()    const { return _objectStates->empty(); }

    // Change the size of the state vector
    void clear() { _objectStates->clear(); }
    void setSize(size_t s) { _objectStates->setSize(s); }

    // Access to an individual state object
          State & operator[](index_t i)       { return (*_objectStates)[i]; }
    const State & operator[](index_t i) const { return (*_objectStates)[i]; }


/*---------------------------------------------------------------------------*
 | Macro-assignment (pass-thru) operators
 *---------------------------------------------------------------------------*/
public:
    // Copy assignment (NOTE: this differs from the copy constructor)
    ThisType & operator=(const ThisType &s) {
        _time = s._time;
        *_objectStates = *s._objectStates;
        return *this;
    }

    // State (+)accumulation assignment
    ThisType & operator+=(const ThisType &s) {
        _time += s._time;
        *_objectStates += *s._objectStates;
        return *this;
    }

    // State (-)accumulation assignment
    ThisType & operator-=(const ThisType &s) {
        _time -= s._time;
        *_objectStates -= *s._objectStates;
        return *this;
    }

    // Scalar multiplication assignment
    ThisType & operator*=(scalar_arg_t s) {
        _time *= s;
        *_objectStates *= s;
        return *this;
    }

    // Scalar division assignment
    ThisType & operator/=(scalar_arg_t s) {
        _time /= s;
        *_objectStates /= s;
        return *this;
    }


/*---------------------------------------------------------------------------*
 | Macro mathematical (pass-thru) operators
 *---------------------------------------------------------------------------*/
public:
    ThisType operator+(const ThisType &s) const {
        ThisType result(time(), size());
        result = *this;         // Copy myself
        result += s;            // Add in 's'
        return result;
    }

    ThisType operator-(const ThisType &s) const {
        ThisType result(time(), size());
        result = *this;         // Copy myself
        result -= s;            // Deduct 's'
        return result;
    }

    ThisType operator*(scalar_arg_t s) const {
        ThisType result(time(), size());
        result = *this;         // Copy myself
        result *= s;            // Scale by 's'
        return result;
    }

    ThisType operator/(scalar_arg_t s) const {
        ThisType result(time(), size());
        result = *this;         // Copy myself
        result /= s;            // Scale by 's'
        return result;
    }
};

#endif

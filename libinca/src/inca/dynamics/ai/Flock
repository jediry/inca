/* -*- C++ -*-
 *
 * File: Flock
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      The Flock operator causes particles to try to   
 a single particle to try
 *      to orbit around a point, given an "up" vector. It uses the
 *      component of velocity that is not along the up vector to
 *      determine the appropriate acceleration in order to achieve
 *      a circular orbit.
 */

#ifndef INCA_DYNAMICS_FLOCK
#define INCA_DYNAMICS_FLOCK

// Import superclass definition
#include "../particle/Operator"

// This is part of the Inca dynamics library
namespace Inca {
    namespace Dynamics {
        // Forward declarations
        template <class Scalar, unsigned int dim> class Flock;
    };
};


template <class Scalar, unsigned int dim>
class Inca::Dynamics::Flock : public Operator<Scalar, dim> {
private:
    // Convenience typedefs
    typedef Operator<Scalar, dim> Superclass;

public:
    // What dimensional space are we working in?
    const static unsigned int dimension = dim;

    // Template typedefs
    typedef typename Superclass::scalar_t       scalar_t;
    typedef typename Superclass::scalar_arg_t   scalar_arg_t;
    typedef typename Superclass::Point          Point;
    typedef typename Superclass::Vector         Vector;

    typedef typename Superclass::Particle       Particle;
    typedef typename Superclass::ParticleState  ParticleState;


/*---------------------------------------------------------------------------*
 | Constructor
 *---------------------------------------------------------------------------*/
public:
    Flock() { }


/*---------------------------------------------------------------------------*
 | Operator evaluation
 *---------------------------------------------------------------------------*/
public:
    virtual void apply(ParticleState &state, scalar_arg_t dt) {
        for (unsigned int i = 0; i < state.particleCount; i++) {
            if (state.particle[i] != leader) {  // Leader doesn't flock

            }
        }
    }

};

#endif

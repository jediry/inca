/* -*- C++ -*-
 *
 * File: FluidForces
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#pragma once
#ifndef INCA_DYNAMICS_FLUID_FORCES
#define INCA_DYNAMICS_FLUID_FORCES

// Import superclass definition
#include "Operator"

// This is part of the Inca dynamics library
namespace Inca {
    namespace Dynamics {
        // Forward declarations
        template <class Scalar, unsigned int dim> class WindForce;
    };
};


template <class Scalar, unsigned int dim>
class Inca::Dynamics::WindForce : public Operator<Scalar, dim> {
private:
    // Convenience typedefs
    typedef Operator<Scalar, dim> Superclass;

public:
    // What dimensional space are we working in?
    const static unsigned int dimension = dim;

    // Template typedefs
    typedef typename Superclass::scalar_t       scalar_t;
    typedef typename Superclass::scalar_arg_t   scalar_arg_t;
    typedef typename Superclass::Point          Point;
    typedef typename Superclass::Vector         Vector;

    typedef typename Superclass::Particle       Particle;
    typedef typename Superclass::ParticleState  ParticleState;


/*---------------------------------------------------------------------------*
 | Constructor
 *---------------------------------------------------------------------------*/
public:
    WindForce(const Vector &wv) : windVelocity(wv) { }

protected:
    Vector windVelocity;


/*---------------------------------------------------------------------------*
 | Calculation of the force exerted by this object
 *---------------------------------------------------------------------------*/
public:
    // Calculation of forces exterted on all particles affected by this object
    virtual void apply(ParticleState &state, scalar_arg_t dt) {
        for (unsigned int i = 0; i < state.particleCount; i++) {
            Particle &p = *state.particle[i];
            state.force[i] += p.drag * (windVelocity - p.velocity);
        }
    }
};

#endif

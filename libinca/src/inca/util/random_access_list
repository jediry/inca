/* -*- C++ -*-
 *
 * File: random_access_list
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This is like a vector. But like a linked list too. And it's got a
 *      hash map in there too...
 
 Not resizeable
 type must be equality comparable, and hashable. Probably shouldn't be too big
 */

#pragma once
#ifndef INCA_UTIL_RANDOM_ACCESS_LIST
#define INCA_UTIL_RANDOM_ACCESS_LIST

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca utilities collection
namespace inca {
    // Forward declarations
    template <typename T> class random_access_list;
};


template <typename T>
class inca::random_access_list {
private:
    // Shall we print out debugging information?
    static const bool debug = false;

public:
    // Template typedefs
    typedef T               value;
    typedef T &             reference;
    typedef const T &       const_reference;
    typedef T *             pointer;
    typedef const T *       const_pointer;

    // This is a sentinel value for "not found in list"
    static const IndexType NOT_FOUND = 0xFFFFFFFF;

private:
    // Linked-list node
    struct node {
        value v;
        node *next;
    };


public:
    // An iterator to walk thru the list while unlocked
    class iterator {
    public:
        iterator() : current(NULL) { }
        iterator(node * curr) : current(curr) { }

        reference operator->() { return current->v; }       // i->
        reference operator*() { return *(current->v); }     // *i
        iterator & operator++() {                           // ++i
            current = current->next;
            return *this;
        }
        iterator operator++(int) {                          // i++
            iterator i = *this;
            current = current->next;
            return i;
        }
        bool operator==(const iterator &i) const {          // i == j
            return i.current == current;
        }
        bool operator!=(const iterator &i) const {          // i != j
            return ! (*this == i);
        }

    protected:
        node * current;
    };


/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    // Constructor giving capacity of data structure
    random_access_list(SizeType cap) : _capacity(cap), _size(0),
                                       _dirty(false), _locked(false) {
        // Allocate our array-style storage
        array = new value[capacity()];

        // Since we've fixed the max size, we can pre-allocate list nodes too
        // We treat them like isolated nodes, but they can be allocated en bloc
        listNodes = new node[capacity()];   // all our nodes, in one spot
        clear();    // This initializes the linked list

        if (debug)
            // Tell the world of our handiwork
            cerr << static_cast<string>(*this);
    }

    // Destructor
    ~random_access_list() {
        // Free up the array-style storage
        delete [] array;

        // Free up all the list nodes
        delete [] listNodes;
    }

protected:
    const SizeType _capacity;   // The fixed maximum size of this structure
    SizeType _size;             // How full it is right now
    bool _dirty;                // True if the array and list are out of sync
    bool _locked;               // True if we're in random-access mode

    pointer array;              // Where we store our data for random access
    node *listNodes;            // Where we store our data for list access
    node *listHead, *listTail;  // The head and tail nodes of our list
    node *freeNodeList;         // The start of our unused node pool


/*---------------------------------------------------------------------------*
 | Query functions
 *---------------------------------------------------------------------------*/
public:
    SizeType size()     const { return _size; }
    SizeType capacity() const { return _capacity; }
    bool     empty()    const { return _size == 0; }
    bool     full()     const { return _size == _capacity; }
    bool     dirty()    const { return _dirty; }
    bool     locked()   const { return _locked; }

    // To-string cast
    operator std::string() const {
        std::stringstream ss;
        ss << "RandomAccessList:\n"
              "\tCapacity:   " << capacity() << "\n"
              "\tSize:       " << size() << "\n"
              "\tFree nodes: " << freeNodeCount() << "\n"
              "\tUsed nodes: " << usedNodeCount() << "\n"
              "\tLocked?     " << (locked() ? "yes" : "no") << "\n"
              "\tDirty?      " << (dirty() ? "yes" : "no") << "\n"
              "\tFull?       " << (full() ? "yes" : "no") << "\n"
              "\tEmpty?      " << (empty() ? "yes" : "no") << "\n";
        return ss.str();
    }

protected:
    // These are mostly just useful for debugging
    SizeType freeNodeCount() const {
        SizeType count = 0;
        node * n = freeNodeList;
        while(n != NULL) {
            n = n->next;
            count++;
        }
        return count;
    }

    SizeType usedNodeCount() const {
        SizeType count = 0;
        node * n = listHead;
        while(n != NULL) {
            n = n->next;
            count++;
        }
        return count;
    }


/*---------------------------------------------------------------------------*
 | Management functions
 *---------------------------------------------------------------------------*/
public:
    // Reinitialize ourselves to an empty state
    void clear() {
        _size = 0;  // Zero the item count

        // Clear the linked list
        listHead = listTail = NULL;
        freeNodeList = listNodes;
        for (IndexType i = 0; i < capacity() - 1; i++)    // Link 'em all
            listNodes[i].next = &listNodes[i + 1];
        listNodes[capacity() - 1].next = NULL;  // Last guy points nowhere
    }

    // Lock down the list. Inserts and deletes will be ignored and
    // random-access will be permitted
    void lock() {
        if (! locked()) {
            _locked = true;
            if (dirty())
                rebuildArray();
            if (debug)
                cerr << "Locking list\n";
        }
    }

    // Unlock the list. Inserts and deletes will be allowed and random-access
    // is undefined. Do so at your own risk.
    void unlock() {
        if (locked()) {
            _locked = false;
            if (debug)
                cerr << "Unlocking list\n";
        }
    }

    bool push_front(const_reference v) {
        if (locked()) {
            if (debug)
                cerr << "Dummy! No inserts allowed while locked\n";
            return false;
        } else if (full()) {
            if (debug)
                cerr << "Insert failed -- the list is full\n";
            return false;
        } else {
            node * n = acquire_node();
            n->v = v;
            insert(n, NULL, listHead);
            return true;
        }
    }

    bool push_back(const_reference v) {
        if (locked()) {
            if (debug)
                cerr << "Dummy! No inserts allowed while locked\n";
            return false;
        } else if (full()) {
            if (debug)
                cerr << "Insert failed -- the list is full\n";
            return false;
        } else {
            node * n = acquire_node();
            n->v = v;
            insert(n, listTail, NULL);
            return true;
        }
    }

    // Insert an item before the specified index, or at the end
    // (whichever is sooner)
    bool insert(IndexType beforeIndex, const_reference v) {
        if (locked()) {
            if (debug)
                cerr << "Dummy! No inserts allowed while locked\n";
            return false;
        } else if (full()) {
            if (debug)
                cerr << "Insert failed -- the list is full\n";
            return false;
        } else {
            // Walk down the list 'til we find our spot, or run out of road
            node * guyBefore = NULL, guyAfter = listHead;
            for (IndexType i = 0; i < beforeIndex; i++) {
                if (guyAfter == NULL)
                    break;
                guyBefore = guyAfter;
                guyAfter = guyAfter->next;
            }

            // I guess we found it, so here goes
            node * n = acquire_node();
            n->v = v;
            insert(n, guyBefore, guyAfter);
            return true;
        }
    }

    bool pop_front() {
        if (locked()) {
            if (debug)
                cerr << "Dummy! No deletes allowed while locked\n";
            return false;
        } else if (empty()) {
            if (debug)
                cerr << "Delete failed -- the list is empty\n";
            return false;
        } else {
            node * n = listHead;
            extract(n, NULL, n->next);
            release_node(n);
            return true;
        }
    }

    bool pop_back(const_reference v) {
        if (locked()) {
            if (debug)
                cerr << "Dummy! No deletes allowed while locked\n";
            return false;
        } else if (empty()) {
            if (debug)
                cerr << "Delete failed -- the list is empty\n";
            return false;
        } else {
            node * prev = NULL;
            node * n = listHead;
            while (n != listTail) {
                prev = n;
                n = n->next;
            }
            extract(n, prev, NULL);
            release_node(n);
            return true;
        }
    }

    iterator begin() { return iterator(listHead); }
    iterator end() { return iterator(listTail); }


    // Remove the item at the specified index (returns false for an
    // out-of-range index)
    bool erase(IndexType atIndex) {
        if (locked()) {
            if (debug)
                cerr << "Dummy! No deletes allowed while locked\n";
            return false;
        } else if (empty()) {
            if (debug)
                cerr << "Delete failed -- the list is empty\n";
            return false;
        } else {
            // Walk down the list 'til we find our spot, or run out of road
            node * guyBefore = NULL, guyToDelete = listHead;
            for (IndexType i = 0; i < atIndex; i++) {
                if (guyToDelete == NULL)
                    return false;
                guyBefore = guyToDelete;
                guyToDelete = guyToDelete->next;
            }

            // I guess we found it, so here goes
            extract(guyToDelete, guyBefore, guyToDelete->next);
            release_node(guyToDelete);
            return true;
        }
    }

protected:
    // Get a node out of our "junk pile" to be inserted into the list
    node * acquire_node() {
        if (freeNodeList == NULL) {
            if (debug)
                cerr << "Argh! There are no free nodes to dispense\n";
            return NULL;
        } else {
            // Take one down, pass it around, n - 1 free list nodes on the wall
            node * n = freeNodeList;
            freeNodeList = freeNodeList->next;
            return n;
        }
    }

    // Return a node to the "junk pile"
    void release_node(node * uselessCrap) {
        if (uselessCrap != NULL) {
            // Stick me onto the top of the junk pile
            uselessCrap->next = freeNodeList;
            freeNodeList = uselessCrap;
        }
    }

    // Insert the given node between the other two (either or both may be NULL)
    // and increment the size of the list and mark it as "dirty"
    void insert(node * insertMe, node * afterMe, node * beforeMe) {
        if (insertMe == NULL) {
            if (debug)
                cerr << "Attempting to insert NULL node!\n";
            return;
        }

        // First, fix up the guy before
        if (afterMe == NULL)
            listHead = insertMe;
        else
            afterMe->next = insertMe;

        // Now, fix up the guy following me
        insertMe->next = beforeMe;
        if (beforeMe == NULL)
            listTail = insertMe;

        _size++;        // We're now one bigger!
        _dirty = true;  // Our array is definitely out of sync
    }
    
    // Remove a node from between the two other nodes (either or both may be
    // NULL) and decrement the size of the list and mark it as "dirty"
    void extract(node * extractMe, node * fromAfterMe, node * fromBeforeMe) {
        if (extractMe == NULL) {
            if (debug)
                cerr << "Attempting to extract NULL node!\n";
            return;
        }

        if (fromAfterMe == NULL)    // This was the first node
            listHead = fromBeforeMe;
        else
            fromAfterMe->next = fromBeforeMe;

        if (fromBeforeMe == NULL)   // This was the last node
            listTail = fromAfterMe;

        _size--;        // We've lost one!
        _dirty = true;  // Our array is now screwed up
    }

    void rebuildArray() {
        node * n = listHead;
        for (IndexType i = 0; i < size(); i++) {
            if (debug && n == NULL)
                cerr << "Oh no! rebuildList() ran out of stuff at index " << i << '\n';
            array[i] = n->v;    // Copy over the value to the array
            n = n->next;        // Move along
        }
        _dirty = false; // OK! We're sync'd up!
    }


/*---------------------------------------------------------------------------*
 | Random-access accessor functions (should only be called when locked)
 *---------------------------------------------------------------------------*/
public:
    reference operator[](IndexType i) {
        // These should get compiled out if debug == false
        if (debug && ! locked())
            cerr << "Ack! Attempting to index into an unlocked "
                    "RandomAccessList...oh well...not my jeep\n";
        else if (debug && i >= size())
            cerr << "Uh oh! Index " << i << " is not in the bounds 0.."
                 << (size() - 1) << '\n';
        return array[i];
    }

    const_reference operator[](IndexType i) const {
        // These should get compiled out if debug == false
        if (debug && ! locked())
            cerr << "Ack! Attempting to index into an unlocked "
                    "RandomAccessList...oh well...not my jeep\n";
        else if (debug && i >= size())
            cerr << "Uh oh! Index " << i << " is not in the bounds 0.."
                 << (size() - 1) << '\n';
        return array[i];
    }

    // Do a linear search for the index 
    IndexType index_of(const_reference v) const {
        IndexType index = NOT_FOUND;
        if (debug && ! locked()) {
            cerr << "Ack! Attempting to search an unlocked "
                    "RandomAccessList. Die foolish programmer!\n";
        } else if (locked()) {
            for (IndexType i = 0; i < capacity(); i++)
                if (array[i] == v) {
                    index = i;
                    break;
                }
        }
        return index;
    }
};

#endif

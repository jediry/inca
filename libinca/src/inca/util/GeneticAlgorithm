/** -*- C++ -*-
 *
 * \file GeneticAlgorithm
 *
 * \author Ryan L. Saunders
 *
 * Copyright 2005, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      The GeneticAlgorithm template class (and its related classes) implement
 *      a modular framework for genetic algorithms.
 *
 * Usage:
    the chromosome must have a default constructor
 *      In many cases, the default implementation is sufficient and may be used
 *      as-is, simply by defining an appropriate "chromosome" class with a
 *      "gene" inner class or typedef, and adding subclasses of
 XXX GeneticOperator for the
 *      initialization, mutation, crossover and fitness operations.
 *
 *      In case the default implementation is not sufficient for your purposes,
 *      most member functions are declared "virtual", allowing them to be
 *      overridden in a subclass.
 */

#ifndef INCA_UTIL_GENETIC_ALGORITHM
#define INCA_UTIL_GENETIC_ALGORITHM

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca utilities collection
namespace inca {
    // Forward declarations
    class GeneticAlgorithmListener;
    class GeneticAlgorithmException;
    template <typename ChromosomeT,
              typename ScalarT>     class GeneticAlgorithm;
}


// Import container definitions
#include <vector>

// Import math utilities
#include <inca/math/generator/RandomUniform>
#include <inca/math/statistics/ProbabilityMass>

// Import exception base class
#include "StreamException.hpp"


/**
 * The listener interface that objects wishing to be informed of the progress
 * of the GA must implement.
 */
class inca::GeneticAlgorithmListener { };


/**
 * Thrown when an error condition occurs within the GA. The message() function
 * (or the std::exception::what() function) can be used to retrieve additional
 * information about the error.
 */
class inca::GeneticAlgorithmException : public inca::StreamException {
public:
    // Constructors
    explicit GeneticAlgorithmException() { }
    explicit GeneticAlgorithmException(const std::string & msg)
        : StreamException(msg) { }
};


template <typename ChromosomeT, typename ScalarT>
class inca::GeneticAlgorithm {
/*---------------------------------------------------------------------------*
 | Type definitions
 *---------------------------------------------------------------------------*/
public:
    typedef ChromosomeT                 Chromosome;
    typedef typename Chromosome::Gene   Gene;
    typedef ScalarT                     Scalar;

    struct Operator {
        typedef GeneticAlgorithm<ChromosomeT, ScalarT>  GAType;
        typedef ChromosomeT                             Chromosome;
        typedef typename Chromosome::Gene               Gene;
        typedef ScalarT                                 Scalar;

        // Constructor
        explicit Operator() : _owner(NULL) { }

        // Access to the parent GA
        GAType & owner() { return *_owner; }
        void setOwner(GAType & dad) { _owner = &dad; }

    protected:
        GAType * _owner;
    };
    struct InitializationOperator : public Operator {
        virtual void operator()(Chromosome & c) = 0;
    };
    struct CrossoverOperator : public Operator {
        virtual void operator()(Chromosome & c1, Chromosome & c2) = 0;
    };
    struct MutationOperator : public Operator {
        virtual void operator()(Gene & g) = 0;
    };
    struct FitnessOperator : public Operator {
        virtual Scalar operator()(Chromosome & c) = 0;
    };
    typedef shared_ptr<InitializationOperator>      InitializationOperatorPtr;
    typedef shared_ptr<CrossoverOperator>           CrossoverOperatorPtr;
    typedef shared_ptr<MutationOperator>            MutationOperatorPtr;
    typedef shared_ptr<FitnessOperator>             FitnessOperatorPtr;

    typedef std::vector<Chromosome>                 ChromosomeArray;
    typedef std::vector<Scalar>                     ScalarArray;
    typedef std::vector<bool>                       BoolArray;
    typedef std::vector<InitializationOperatorPtr>  InitializationOperatorList;
    typedef std::vector<CrossoverOperatorPtr>       CrossoverOperatorList;
    typedef std::vector<MutationOperatorPtr>        MutationOperatorList;
    typedef std::vector<FitnessOperatorPtr>         FitnessOperatorList;

    typedef math::RandomUniform<Scalar>                 RandomScalar;
    typedef math::RandomUniform<IndexType>              RandomIndex;
    typedef math::ProbabilityMass<Scalar>               PMF;
    typedef std::vector<std::pair<IndexType, Scalar> >  FitnessMap;

    // Sentinel value indicating that an operator should share any
    // unclaimed probability (the default for added operators)
    static const int REMAINDER = PMF::REMAINDER;

    // Comparison functor for sorting a FitnessMap by fitness
    struct FitnessMapGreaterThan {
        bool operator()(const typename FitnessMap::value_type & f1,
                        const typename FitnessMap::value_type & f2) const {
            return f1.second > f2.second;
        }
    };



/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    // Default constructor
    explicit GeneticAlgorithm() : randomFraction(0, 1), randomIndex(0, 0) { }

protected:
    // The random number generator object used throughout
    RandomScalar randomFraction;
    RandomIndex  randomIndex;


/*---------------------------------------------------------------------------*
 | Chromosome lifecycle management
 *---------------------------------------------------------------------------*/
public:
    /**
     * Returns the number of chromosomes in the population.
     */
    int populationSize() const {
        return _population.size();
    }

    /**
     * Sets the number of chromosomes in the population. If the population
     * size is increased, the new chromosomes start out "dead".
     */
    void setPopulationSize(int n) {
        _population.resize(n);      // Make room for the new guys
        _alive.resize(n, false);    // Mark the new guys dead
        randomIndex.max = n - 1;    // Reconfigure random index generator
    }

    /**
     * Returns a reference to the chromosome with the given index in the
     * population.
     */
    Chromosome & chromosome(IndexType idx) {
        return _population[idx];
    }

    /**
     */
    const Chromosome & chromosome(IndexType idx) const {
        return _population[idx];
    }

    /**
     * Returns the index of the given chromosome within the population.
     */
    IndexType indexOf(const Chromosome & c) const {
        DifferenceType diff = &c - &chromosome(0);
//        if (diff >= populationSize() || diff < 0) {
//            GeneticAlgorithmException e;
//            e << "Cannot take the indexOf(c): this chromosome is not "
//                 "a member of the current population";
//            throw e;
//        }
        return diff;
    }

    /**
     * Returns whether the given chromosome is currently marked as "alive".
     */
    bool alive(const Chromosome & c) const {
        return alive(indexOf(c));
    }
    bool alive(IndexType idx) const {
        return _alive[idx];
    }

    /**
     * Marks the given chromosome as "dead".
     */
    void kill(Chromosome & c) {
        kill(indexOf(c));
    }
    void kill(IndexType idx) {
        _alive[idx] = false;
    }

    /**
     * Brings the given chromosome to life and calls initialize(c) on it to
     * produce a new chromosome in place of the old, dead one.
     */
    void birth(Chromosome & c) {
        _alive[indexOf(c)] = true;
        initialize(c);
    }

protected:
    ChromosomeArray _population;
    BoolArray       _alive;


/*---------------------------------------------------------------------------*
 | Genetic operators
 *---------------------------------------------------------------------------*/
public:
    /**
     * Adds one or more operators from a container to the set of available
     * initialization ops.
     */
    template <class OpList>
    void addInitializationOperators(const OpList & ops) {
        typename OpList::const_iterator it;
        for (it = ops.begin(); it != ops.end(); ++it)
            addInitializationOperator(*it);
    }

    /**
     * Adds one or more operators from a container to the set of available
     * crossover operators.
     */
    template <class OpList>
    void addCrossoverOperators(const OpList & ops) {
        typename OpList::const_iterator it;
        for (it = ops.begin(); it != ops.end(); ++it)
            addCrossoverOperator(*it);
    }

    /**
     * Adds one or more operators from a container to the set of available
     * mutation operators.
     */
    template <class OpList>
    void addMutationOperators(const OpList & ops) {
        typename OpList::const_iterator it;
        for (it = ops.begin(); it != ops.end(); ++it)
            addMutationOperator(*it);
    }

    /**
     * Adds one or more operators from a container to the set of available
     * fitness evaluation operators.
     */
    template <class OpList>
    void addFitnessOperators(const OpList & ops) {
        typename OpList::const_iterator it;
        for (it = ops.begin(); it != ops.end(); ++it)
            addFitnessOperator(*it);
    }

    /**
     */
    void addInitializationOperator(InitializationOperator * op,
                                   Scalar p = REMAINDER) {
        InitializationOperatorPtr ptr(op);
        addInitializationOperator(ptr, p);
    }
    virtual void addInitializationOperator(InitializationOperatorPtr op,
                                           Scalar p = REMAINDER) {
        op->setOwner(*this);
        _initializationOperators.push_back(op);
        _initializationOperatorPMF.add(p);
    }

    /**
     */
    void addCrossoverOperator(CrossoverOperator * op,
                              Scalar p = REMAINDER) {
        CrossoverOperatorPtr ptr(op);
        addCrossoverOperator(ptr, p);
    }
    virtual void addCrossoverOperator(CrossoverOperatorPtr op,
                                      Scalar p = REMAINDER) {
        op->setOwner(*this);
        _crossoverOperators.push_back(op);
        _crossoverOperatorPMF.add(p);
    }

    /**
     */
    void addMutationOperator(MutationOperator * op,
                             Scalar p = REMAINDER) {
        MutationOperatorPtr ptr(op);
        addMutationOperator(ptr, p);
    }
    virtual void addMutationOperator(MutationOperatorPtr op,
                                     Scalar p = REMAINDER) {
        op->setOwner(*this);
        _mutationOperators.push_back(op);
        _mutationOperatorPMF.add(p);
    }

    /**
     * Adds a single operator to the set of fitness operators, with an optional
     * weighting.
     */
    void addFitnessOperator(FitnessOperator * op,
                            Scalar w = REMAINDER) {
        FitnessOperatorPtr ptr(op);
        addFitnessOperator(ptr, w);
    }
    virtual void addFitnessOperator(FitnessOperatorPtr op,
                                    Scalar w = REMAINDER) {
        op->setOwner(*this);
        _fitnessOperators.push_back(op);
        _fitnessOperatorWeights.add(w);
    }

    InitializationOperator & initializationOperator(IndexType idx) {
        return *_initializationOperators[idx];
    }
    CrossoverOperator & crossoverOperator(IndexType idx) {
        return *_crossoverOperators[idx];
    }
    MutationOperator & mutationOperator(IndexType idx) {
        return *_mutationOperators[idx];
    }
    FitnessOperator & fitnessOperator(IndexType idx) {
        return *_fitnessOperators[idx];
    }
    SizeType initializationOperatorCount() const { return _initializationOperators.size(); }
    SizeType crossoverOperatorCount() const { return _crossoverOperators.size(); }
    SizeType mutationOperatorCount() const { return _mutationOperators.size(); }
    SizeType fitnessOperatorCount() const { return _fitnessOperators.size(); }

    /**
     * Calculates and/or returns the probability mass function corresponding
     * to the set of available initialization operators. The PMF is allowed to
     * change based on the chromosome about to be initialized. The default
     * implementation simply returns the same PMF for every chromosome,
     * based on the probabilities assigned when the operators were added.
     *
     * This may be overridden in a subclass.
     */
    virtual const PMF & initializationOperatorPMF(const Chromosome & c) const {
        return _initializationOperatorPMF;
    }

    /**
     * Calculates and/or returns the probability mass function corresponding
     * to the set of available crossover operators. The PMF is allowed to
     * change based on the chromosomes about to be cross-bred. The default
     * implementation simply returns the same PMF for every pair of chromosomes,
     * based on the probabilities assigned when the operators were added.
     *
     * This may be overridden in a subclass.
     */
    virtual const PMF & crossoverOperatorPMF(const Chromosome & c1,
                                             const Chromosome & c2) const {
        return _crossoverOperatorPMF;
    }

    /**
     * Calculates and/or returns the probability mass function corresponding
     * to the set of available mutation operators. The PMF is allowed to
     * change based on the gene about to be mutated. The default
     * implementation simply returns the same PMF for every gene,
     * based on the probabilities assigned when the operators were added.
     *
     * This may be overridden in a subclass.
     */
    virtual const PMF & mutationOperatorPMF(const Gene & g) const {
        return _mutationOperatorPMF;
    }

    /**
     * Calculates and/or returns the weight vector corresponding to the set of
     * available fitness calculation operators. The weight vector is allowed to
     * change based on the chromosome being measured, though this may cause
     * problems for the fitness comparison. The default implementation simply
     * returns the same weight vector for every chromosome, based on the
     * weights assigned when the operators were added.
     *
     * This may be overridden in a subclass.
     */
    virtual const PMF & fitnessOperatorWeights(const Chromosome & c) const {
        return _fitnessOperatorWeights;
    }

protected:
    InitializationOperatorList  _initializationOperators;
    CrossoverOperatorList       _crossoverOperators;
    MutationOperatorList        _mutationOperators;
    FitnessOperatorList         _fitnessOperators;
    PMF _initializationOperatorPMF,
        _crossoverOperatorPMF,
        _mutationOperatorPMF,
        _fitnessOperatorWeights;


/*---------------------------------------------------------------------------*
 | Genetic algorithm sub-parts
 *---------------------------------------------------------------------------*/
public:
    /**
     * Runs the GA and returns a reference to the most fit chromosome produced
     * by the algorithm.
     */
    virtual const Chromosome & run() {
        beginAlgorithm();

        // Run the GA evolution loop until we decide we're done. By default,
        // the evolution process stops after a fixed number of cycles.
        while (! done()) {
            beginCycle();

            // Create as many new chromosomes as we need to bring our
            // population up to full strength.
            replenishPopulation();

            // Now evaluate all of them and keep only the good ones.
            prunePopulation();

            // Exchange genetic material between chromosomes in the population.
            for (IndexType i = 0; i < populationSize(); ++i) {
                Chromosome & c1 = chromosome(i);
                if (alive(c1) && shouldCross(c1)) {
                    Chromosome & c2 = selectMate(c1);
                    cross(c1, c2);
                }
            }

            // Introduce new genetic material via mutations
            for (IndexType i = 0; i < populationSize(); ++i) {
                Chromosome & c = chromosome(i);
                if (alive(c) && shouldMutate(c)) {
                    typename Chromosome::IndexArray idx;
                    for (idx[0] = 0; idx[0] < c.size(0); ++idx[0])
                        for (idx[1] = 0; idx[1] < c.size(1); ++idx[1]) {
                            Gene & g = c(idx);
                            if (shouldMutate(g))
                                mutate(g);
                        }
                }
            }

            endCycle();
        }

        endAlgorithm();

        // Return our most viable candidate
        const FitnessMap & fitMap = sortedFitnessMap();
        INCA_INFO("GA produced most fit  " << fitMap.front().second)
        INCA_INFO("GA produced least fit " << fitMap.back().second)
        return chromosome(fitMap.front().first);
    }

    /**
     * Called at the beginning of the GA. The default implementation sets
     * the evolution cycle counter to zero, and marks all chromosomes as "dead".
     *
     * This may be overridden in a subclass.
     */
    virtual void beginAlgorithm() {
        INCA_DEBUG("Beginning algorithm")
        _currentCycle = 0;
        std::fill(_alive.begin(), _alive.end(), false);
    }

    /**
     * Called at the end of the algorithm. This may be used to perform any
     * final processing and cleanup at the end of the GA. The default
     * implementation does nothing.
     *
     * This may be overridden in a subclass.
     */
    virtual void endAlgorithm() {
        INCA_DEBUG("Finishing algorithm")
    }

    /**
     * Called at the beginning of every evolution cycle. This may be used to
     * perform any setup needed for a cycle of the GA. The default
     * implementation does nothing.
     *
     * This may be overridden in a subclass.
     */
    virtual void beginCycle() {
        INCA_DEBUG("Beginning cycle " << currentCycle())
    }

    /**
     * Called at the end of every evolution cycle. This may be used to perform
     * any necessary per-cycle cleanup or postprocessing. The default
     * implementation increments the evolution cycle counter.
     *
     * This may be overridden in a subclass.
     */
    virtual void endCycle() {
        INCA_DEBUG("Finishing cycle " << currentCycle())
        _currentCycle++;
    }

    /**
     * Called to determine when to terminate the evolution process. The default
     * implementation terminates when evolutionCycles() iterations have been
     * run.
     *
     * This may be overridden in a subclass.
     */
    virtual bool done() const {
        return currentCycle() >= evolutionCycles();
    }

    /**
     * Returns the (zero-based) index of the currently executing evolution
     * cycle.
     */
    int currentCycle() const { return _currentCycle; }


    /**
     * Called to restore the chromosome population to full strength. Each
     * chromosome currenly marked as "dead" is replaced with a newly created
     * chromosome.
     *
     * This may be overridden in a subclass.
     */
    virtual void replenishPopulation() {
        for (IndexType i = 0; i < populationSize(); ++i) {
            Chromosome & c = chromosome(i);
            if (! alive(c))
                birth(c);
        }
    }

    /**
     * Evaluates the fitness of each chromosome in the population, then kills
     * off the unfit chromosomes. The default implementation randomly selects
     * selectionRatio() percent of the chromosomes, including elitismRatio()
     * percent of the "best" chromosomes, to continue, killing off the rest.
     *
     * This may be overridden in a subclass.
     */
    virtual void prunePopulation() {
        // Calculate the fitness of every chromosome in the population
        calculatePopulationFitness();

        // Figure out how many chromosomes we're talking about here
        int numberToSelect = int(populationSize() * selectionRatio() + 0.5f);
        int numberOfElites = int(populationSize() * elitismRatio()  + 0.5f);
        if (numberToSelect < numberOfElites)
            numberToSelect = numberOfElites;

        // Sort the population in decreasing order by overall fitness
        FitnessMap popFit = sortedFitnessMap();

        // Select which to keep and kill
        if (numberToSelect < populationSize()) {
            // We have to decide which ones we're going to keep
            int numberSelected = 0;
            BoolArray selected(populationSize(), false);

            INCA_DEBUG("Selecting " << numberOfElites << " elites and " <<
                       (numberToSelect - numberOfElites) << " non-elites "
                       "from a population of size " << populationSize())

            // First, we have to handle the 'elites' -- take the top n%
            for (int i = 0; i < numberOfElites; ++i) {
                INCA_DEBUG("\tElite:    \t" << popFit[i].first << "\tfitness("
                           << popFit[i].second << ")")
                IndexType index = popFit[i].first;
                selected[index] = true;
                numberSelected++;
            }

            // Now, we randomly choose the remaining amount to select from among
            // the non-elites.
            const PMF & pmf = chromosomeFitnessPMF();
            int attempts = 0;
            while (numberSelected < numberToSelect) {
                // Select an individual from the old population to carry over
                // into the new one. We might have to try multiple times in
                // case we accidentally select one we've already picked.
                IndexType index;
                do {
                    // Generate a random value between 0 and 1, which is a
                    // point in the probability mass function. We
                    // will select the individual chromosome corresponding
                    // to that point. The result of this is that chromosomes
                    // with higher fitness have a greater chance of being
                    // picked, since they occupy a larger proportion of the PMF.
                    index = pmf.indexFor(randomFraction());
                    attempts++;
                } while (selected[index]);  // Keep trying 'til we get a new one

                // Mark this one as 'kept'
                INCA_DEBUG("\tNon-elite:\t" << index << "\tfitness("
                           << pmf.element(index) << ")")
                selected[index] = true;
                numberSelected++;
            }
            INCA_DEBUG("Selecting non-elites took " << attempts << " attempts");

            // OK. We know which ones to keep. Let's kill off the rest.
            for (int i = 0; i < populationSize(); ++i)
                if (! selected[i]) {
                    INCA_DEBUG("'Reeducating' chromosome " << i);
                    kill(i);
                }

        } else {
            INCA_DEBUG("You asked me to select the entire population?? "
                       "Well, ok...it's your program...")
        }
    }

    /**
     * Initializes the contents of a chromsome. The default implementation
     * chooses one of the available initialization operators, according to
     * their associated probabilities, and executes it.
     *
     * This may be overridden in a subclass.
     */
    virtual void initialize(Chromosome & c) {
        if (initializationOperatorCount() > 0) {
            const PMF & pmf = initializationOperatorPMF(c);
            IndexType opIndex = pmf.indexFor(randomFraction());
            initializationOperator(opIndex)(c);
        } else {
            INCA_WARNING(typeid(this).name() << "::mutate(...) called, "
                         "but no initialization operators have been added")
        }
    }

    /**
     * Exchanges genetic material between two chromosomes. The default
     * implementation chooses one of the available crossover operators,
     * according to their associated probabilities, and executes it.
     *
     * This may be overridden in a subclass.
     */
    virtual void cross(Chromosome & c1, Chromosome & c2) {
        if (crossoverOperatorCount() > 0) {
            const PMF & pmf = crossoverOperatorPMF(c1, c2);
            IndexType opIndex = pmf.indexFor(randomFraction());
            crossoverOperator(opIndex)(c1, c2);
        } else {
            INCA_WARNING(typeid(this).name() << "::cross(...) called, "
                         "but no crossover operators have been added")
        }
    }

    /**
     * Introduces variation into the genetic material of a chromosome. The
     * default implementation chooses one of the available mutation operators,
     * according to their associated probabilities, and executes it.
     *
     * This may be overridden in a subclass.
     */
    virtual void mutate(Gene & g) {
        if (mutationOperatorCount() > 0) {
            const PMF & pmf = mutationOperatorPMF(g);
            IndexType opIndex = pmf.indexFor(randomFraction());
            mutationOperator(opIndex)(g);
        } else {
            INCA_WARNING(typeid(this).name() << "::mutate(...) called, "
                         "but no mutation operators have been added")
        }
    }

    /**
     * Calculates the fitness for each chromosome in the population and builds
     * a probability mass function based on this.
     */
    virtual void calculatePopulationFitness() {
        _fitnessMap.reserve(populationSize());
        _chromosomeFitnessPMF.clear();
        _fitnessMap.clear();
        for (IndexType i = 0; i < populationSize(); ++i) {
            Scalar fitness = calculateFitness(chromosome(i));
            _chromosomeFitnessPMF.add(fitness);
            _fitnessMap.push_back(std::pair<IndexType, Scalar>(i, fitness));
        }
    }

    virtual const FitnessMap & sortedFitnessMap() {
        std::sort(_fitnessMap.begin(), _fitnessMap.end(),
                  FitnessMapGreaterThan());
        return _fitnessMap;
    }

    /**
     * Calculates and/or returns the probability mass function built from the
     * (normalized) fitnesses of each living chromosome in the population.
     * Fitnesses are normalized such that they sum to 1.0.
     */
    virtual const PMF & chromosomeFitnessPMF() {
        return _chromosomeFitnessPMF;
    }


    /**
     * Calculates the fitness of a chromosome. The default implementation
     * calculates the fitness as the weighted average of each of the fitness
     * operators, using the weights returned by fitnessOperatorWeights().
     */
    virtual Scalar calculateFitness(Chromosome & c) {
        Scalar fitness = 0;
        INCA_DEBUG("Fitness for chromosome " << indexOf(c))
        if (fitnessOperatorCount() > 0) {
            const PMF & weights = fitnessOperatorWeights(c);
            for (IndexType i = 0; i < fitnessOperatorCount(); ++i)
                // Only have to do it if it has a non-zero weight
                if (weights.element(i) != 0) {
                    fitness += weights.probability(i) * fitnessOperator(i)(c);
                    INCA_DEBUG("Doing op " << i << " for a cum.fit. of " << fitness)
                }
        } else {
            INCA_WARNING(typeid(this).name() << "::calculateFitness(...) called, "
                         "but no fitness operators have been added")
        }
        return fitness;
    }

    /**
     * Determines whether or not a chromosome should be cross-bred with
     * another. The default implementation will, on average, choose to
     * cross-breed approximately (crossoverProbability() / 2) percent of the
     * living population with other chromosomes, for a total of approximately
     * crossoverProbability() percent of the living population involved in
     * crossover operations.
     */
    virtual bool shouldCross(Chromosome & c) {
        return (randomFraction() <= crossoverProbability() / 2);
    }

    virtual bool shouldMutate(Chromosome & c) {
        return (randomFraction() <= mutationProbability());
    }

    virtual bool shouldMutate(Gene & g) {
        return (randomFraction() <= mutationRatio());
    }

    virtual Chromosome & selectMate(Chromosome & c) {
        IndexType index = indexOf(c);
        IndexType mateIndex;
        do {
            mateIndex = randomIndex();
        } while(mateIndex == index);
        return chromosome(mateIndex);
    }

    int evolutionCycles() const    { return _evolutionCycles; }
    void setEvolutionCycles(int c) { _evolutionCycles = c; }

    Scalar selectionRatio() const    { return _selectionRatio; }
    void setSelectionRatio(Scalar r) { _selectionRatio = r; }
    Scalar elitismRatio() const    { return _elitismRatio; }
    void setElitismRatio(Scalar r) { _elitismRatio = r; }
    Scalar crossoverProbability() const    { return _crossoverProbability; }
    void setCrossoverProbability(Scalar p) { _crossoverProbability = p; }
    Scalar mutationProbability() const    { return _mutationProbability; }
    void setMutationProbability(Scalar p) { _mutationProbability = p; }
    Scalar crossoverRatio() const    { return _crossoverRatio; }
    void setCrossoverRatio(Scalar r) { _crossoverRatio = r; }
    Scalar mutationRatio() const    { return _mutationRatio; }
    void setMutationRatio(Scalar r) { _mutationRatio = r; }

protected:
    int _evolutionCycles,   // How many iterations do we run?
        _currentCycle;      // Which one are we on right now?
    Scalar  _selectionRatio,        // % population to keep alive
            _elitismRatio,          // % "best" of population to keep alive
            _crossoverProbability,  // Odds of cross-breeding a chromosome
            _mutationProbability,   // Odds of mutating a chromosome
            _crossoverRatio,        // % of chromosome to cross
            _mutationRatio;         // % of chromosome to mutate
    PMF _chromosomeFitnessPMF;
    FitnessMap _fitnessMap;
};

#endif

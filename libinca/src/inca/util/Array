/** -*- C++ -*-
 *
 * \file Array
 *
 * \author Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#ifndef INCA_UTIL_ARRAY
#define INCA_UTIL_ARRAY

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca utilities collection
namespace inca {
    // Forward declarations
    template <typename T, inca::SizeType dim> class Array;
};

// Import iterator adapter definitions
#include "iterators/ReverseIteratorAdapter"

// Import STL function definitions
#include <algorithm>

// Import metaprogramming tools
#include "metaprogramming/is_collection.hpp"
#include "multi-dimensional-macros.hpp"
#include "metaprogramming/macros.hpp"


template <typename T, inca::SizeType dim>
class inca::Array {
/*---------------------------------------------------------------------------*
 | Type & constant declarations
 *---------------------------------------------------------------------------*/
public:
    // Numeric types
    typedef ::inca::SizeType            SizeType;
    typedef ::inca::IndexType           IndexType;
    typedef ::inca::DifferenceType      DifferenceType;

    // Contained types
    typedef T                           ElementType;
    typedef T *                         Pointer;
    typedef T const *                   ConstPointer;
    typedef T &                         Reference;
    typedef T const &                   ConstReference;

    // Iterator types
    typedef Pointer                                 Iterator;
    typedef ConstPointer                            ConstIterator;
    typedef ReverseIteratorAdapter<Iterator>        ReverseIterator;
    typedef ReverseIteratorAdapter<ConstIterator>   ConstReverseIterator;

    // How many dimensions do I have?
    static const SizeType dimensionality = dim;

    // STL-compatibility typedefs
    typedef ElementType             value_type;
    typedef Reference               reference;
    typedef ConstReference          const_reference;
    typedef Pointer                 pointer;
    typedef ConstPointer            const_pointer;
    typedef SizeType                size_type;
    typedef DifferenceType          difference_type;
    typedef Iterator                iterator;
    typedef ConstIterator           const_iterator;
    typedef ReverseIterator         reverse_iterator;
    typedef ConstReverseIterator    const_reverse_iterator;


/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    // Default (no initialization) constructor
    explicit Array() { }

    // Initialization from an arbitrary collection
    template <class Collection>
    explicit Array(const Collection & c,
                   ENABLE_FUNCTION_IF( is_collection<Collection> )) {
        typename Collection::const_iterator it = c.begin();
        for (IndexType i = 0; i < this->size(); ++i, ++it)
            _elements[i] = ElementType(*it);
    }

    // Constant value initialization constructor
    explicit Array(ElementType e) {
        std::fill(begin(), end(), e);
    }

    /**
     * Parameter list constructors giving the size along each dimension.
     * Each of these is intended to be used only with instances of the
     * appropriate rank (calling a constructor of the wrong rank will cause
     * a compile-time assert).
     */
    #define ASSIGN_ELEMENT(DIM) _elements[DIM] = e ## DIM;
    #define CREATE_DIMENSIONAL_CONSTRUCTOR(DIM)                             \
        explicit Array(PARAMS(DIM, ElementType e)) {                        \
            /* Cause a compile-time failure if this constructor is used     \
             * with an instance of the wrong dimensionality. */             \
            BOOST_STATIC_ASSERT(dimensionality == DIM);                     \
                                                                            \
            /* Copy each of the size parameters */                          \
            FOR_EACH(DIM, ASSIGN_ELEMENT);                                  \
        }
    FOR_ALL_DIMS(CREATE_DIMENSIONAL_CONSTRUCTOR);
    #undef CREATE_DIMENSIONAL_CONSTRUCTOR
    #undef ASSIGN_ELEMENT

protected:
    ElementType _elements[dimensionality];  // The elements we're containing


/*---------------------------------------------------------------------------*
 | Accessors & query functions
 *---------------------------------------------------------------------------*/
public:
    // How many elements do we contain?
    SizeType size() const { return dimensionality; }

    // C-style indexed access to elements
         Reference operator[](IndexType i)       { return _elements[i]; }
    ConstReference operator[](IndexType i) const { return _elements[i]; }

    // Fortran-style indexed access to elements
         Reference operator()(IndexType i)       { return _elements[i]; }
    ConstReference operator()(IndexType i) const { return _elements[i]; }

    // Pointer to underlying array
         Pointer elements()       { return _elements; }
    ConstPointer elements() const { return _elements; }

    // Alternative element "at" function
         Reference at(IndexType i)       { return _elements[i]; }
    ConstReference at(IndexType i) const { return _elements[i]; }


/*---------------------------------------------------------------------------*
 | Iterators
 *---------------------------------------------------------------------------*/
public:
    // Forward iterators
         Iterator begin()       { return &_elements[0]; }
    ConstIterator begin() const { return &_elements[0]; }
         Iterator end()       { return &_elements[dimensionality]; }
    ConstIterator end() const { return &_elements[dimensionality]; }

    // Reverse iterators
    ReverseIterator reverseBegin() {
        return ReverseIterator(&_elements[dimensionality - 1]);
    }
    ConstReverseIterator reverseBegin() const {
        return ConstReverseIterator(&_elements[dimensionality - 1]);
    }
    ReverseIterator reverseEnd() {
        return ReverseIterator(&_elements[-1]);
    }
    ConstReverseIterator reverseEnd() const {
        return ConstReverseIterator(&_elements[-1]);
    }


/*---------------------------------------------------------------------------*
 | String conversion functions
 *---------------------------------------------------------------------------*/
public:
    /**
     * Creates a string representation of the elements in this array.
     *
     * This version prints all the elements in the array.
     *
     * \param separator the string to print between consecutive elements.
     *                  This defaults to a comma followed by a space.
     * \param prefix    the string to print before the entire array.
     *                  This defaults to the empty string.
     * \param suffix    the string to print after the entire array.
     *                  This defaults to the empty string.
     * \returns a string representation of containing a list of scalars
     */
    std::string stringifyElements(const std::string & separator = ", ",
                                  const std::string & prefix    = "",
                                  const std::string & suffix    = "") const {
        return stringifyElements(0, dimensionality, 1,
                                 separator, prefix, suffix);
    }

    /**
     * \overload stringifyElements()
     * Creates a string representation of the elements in this array.
     *
     * This version allows to specify the index range which should be
     * stringified. If either \a start or (\a start + \a num * \a stride) are
     * outside the range * [0, dimension - 1], they will be clamped to the nearest
     * valid index.
     *
     * \param start     the index of the first element to stringify
     * \param num       the number of elements to print
     * \param stride    the stride length to take through the list with each
     *                  element we print. If this is \c 1, all elements in
     *                  the range will be printed; if \c 2, every other, etc.
     * \param separator the string to print between consecutive elements.
     *                  This defaults to a comma followed by a space.
     * \param prefix    the string to print before the entire array.
     *                  This defaults to the empty string.
     * \param suffix    the string to print after the entire array.
     *                  This defaults to the empty string.
     * \returns a string representation of the elements in this array
     */
    std::string stringifyElements(IndexType start, IndexType num,
                                  SizeType stride = 1,
                                  const std::string & separator = ", ",
                                  const std::string & prefix    = "",
                                  const std::string & suffix    = "") const {
        IndexType end = start + num * stride;
        if (start < 0)                      start = 0;
        else if (start >= dimensionality)   start = dimensionality;
        if (end < 0)                        end = 0;
        else if (end >= dimensionality)     end = dimensionality;
        std::ostringstream ss;
        ss << prefix;
        for (IndexType i = start; i < end; i += stride) {
            ss << _elements[i];
            if (IndexType(i + stride) < end)  ss << separator;
        }
        ss << suffix;
        return ss.str();
    }
};


// FIXME: implement the rest of the arithmetic ops and replace unnecessary code throughout!!
/*****************************************************************************
 * Element-wise arithmetic operators & functions for numeric scalar types
 *****************************************************************************/
namespace inca {
    template <typename Scalar1, typename Scalar2, inca::SizeType dim>
    bool operator==(const Array<Scalar1, dim> & a1, const Array<Scalar2, dim> & a2) {
        for (IndexType i = 0; i < dim; ++i)
            if (a1[i] != a2[i])
                return false;
        return true;
    }
};


/*****************************************************************************
 * std::ostream writer operator
 *****************************************************************************/
namespace std {
    template <typename scalar, inca::SizeType dim>
    ostream & operator<<(ostream & os, const inca::Array<scalar, dim> & a) {
        return os << a.stringifyElements();
    }
};

// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_MULTI_DIM_MACROS
#include "multi-dimensional-macros.hpp"
#define UNDEFINE_INCA_METAPROGRAMMING_MACROS
#include "metaprogramming/macros.hpp"

#endif


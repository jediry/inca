/** -*- C++ -*-
 *
 * \file ListenerNotifier
 *
 */

#ifndef INCA_UTIL_LISTENER_NOTIFIER
#define INCA_UTIL_LISTENER_NOTIFIER

// Import system configuration
#include <inca/inca-common.h>


// This is part of the Inca utilities collection
namespace inca {
    // Forward declarations
    template <class ListenerT> class ListenerNotifier;
};

template <class ListenerT>
class inca::ListenerNotifier {
public:
    // Definition of related Listener objects
    typedef ListenerT               Listener;
    typedef shared_ptr<Listener>    ListenerPtr;
    typedef weak_ptr<Listener>      ListenerWeakPtr;
    typedef list<ListenerWeakPtr>   ListenerList;


    /**
     * Adds a listener to the list of objects to be notified when something
     * relevent happens. If \a ls is \c NULL or is already in the list, the
     * list will not be changed and a warning will be printed.
     *
     * \param ls a \c shared_ptr to the object that wants to listen
     */
    void add(ListenerPtr ls) {
        // We don't add NULL listeners
        if (! ls) {
            logger << "ListenerNotifier::add(): Refusing to add NULL listener";
            logger.warning();
            return;
        }

        // Nor do we add people twice
        ListenerPtr lsi = firstListener();
        while (lsi) {
            if (lsi == ls) {
                logger << "ListenerNotifier::add(): Hey! You tried to add "
                          "an already-listening listener!";
                logger.warning();
                return;             // Bail if this happens
            }
            lsi = nextListener();
        }

        // OK. All's well
        listeners.push_back(ListenerWeakPtr(ls));
    }

    /**
     * Removes a listener from the list of listening objects. After this call,
     * the object will no longer receive notifications of relevent events.
     * If \a ls is \c NULL or is not in the list, the list will not be changed
     * and a warning will be printed.
     *
     * \param ls a \c shared_ptr to the object that should be removed
     */
    void remove(ListenerPtr ls) {
        // We don't add NULL listeners
        if (! ls) {
            logger << "ListenerNotifier::remove(): "
                      "Refusing to remove NULL listener";
            logger.warning();
            return;
        }

        // Nor do we remove people who aren't here
        ListenerPtr lsi = firstListener();
        while (lsi) {
            if (lsi == ls) {
                listeners.erase(i);
                return;             // OK, we're done
            }
            lsi = nextListener();
        }

        // Crud. We shouldn't have gotten here.
        logger << "ListenerNotifier::remove(): Umm...the guy you were "
                  "looking for isn't listening to me!";
        logger.warning();
    }

    /**
     * Returns the number of listening objects. Note that, unlike the other
     * functions, this does not extricate dead pointers from the list, so it
     * may be used without concern for thread-safety.
     *
     * \return the number of listening objects in the list (some of whom may
     *         be dead)
     */
    typename ListenerList::size_type listenerCount() { return listeners.size(); }


    ListenerPtr firstListener() {
        currentListener = listeners.begin();
        currentListenerIndex = 0; 
        return nextListener();
    }

    ListenerPtr nextListener() {
        ListenerPtr ls;

        // While we've not found one and there are still more to look at...
        while (!ls && currentListener != listeners.end()) {
            ls = currentListener->lock();   // Try to get a shared_ptr from weak
            if (!ls) {
                currentListener = listeners.erase(currentListener);
                logger << "Awww...how sad. Listener #" << currentListenerIndex
                       << " died on us...deleting (" << listeners.size()
                       << " listeners left)";
                logger.info();
            } else {
                currentListener++;
                currentListenerIndex++;
            }
        }
        return ls;
    }

protected:
    // The list of listening objects
    ListenerList listeners;

    // The current listener that we're notifying, used by firstListener()
    // and nextListener().
    typename ListenerList::iterator currentListener;
    index_t currentListenerIndex;
};

#endif

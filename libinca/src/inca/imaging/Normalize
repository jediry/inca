/* -*- C++ -*-
 *
 * File: Normalize
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#ifndef INCA_IMAGING_NORMALIZE
#define INCA_IMAGING_NORMALIZE


// Import Image definition
#include "Image"

// This is part of the Inca imaging library
namespace Inca {
    namespace Imaging {
        // Forward declarations
        template <typename Color> class Normalize;
    };
};


template <typename Color>
class Inca::Imaging::Normalize {
public:
    // XXX Total hack
    typedef double scalar_t;
    typedef double       scalar_arg_t;

    // Make 'dest' a filtered version of 'src'
    void apply(Image<Color> &img) {
        // Figure out our to/from dimensions
        unsigned int imgWidth = img.width(),
                     imgHeight = img.height();

        // Search for the highest and lowest color component values in img
        // Ack! Hack!
        scalar_t minValue = 100000,
                 maxValue = -100000;
        for (unsigned int x = 0; x < imgWidth; x++)
            for (unsigned int y = 0; y < imgHeight; y++) {
                Color &c = img(x, y);
                for (unsigned int comp = 0; comp < 3; comp++) {
                    if (c[comp] > maxValue) maxValue = c[comp];
                    if (c[comp] < minValue) minValue = c[comp];
                }
            }

        cerr << "Normalize: Stretching [" << minValue << ", " << maxValue
             << "] to [0.0, 1.0]" << endl;

        for (unsigned int x = 0; x < imgWidth; x++)
            for (unsigned int y = 0; y < imgHeight; y++) {
                Color &c = img(x, y);
                for (unsigned int comp = 0; comp < 3; comp++) {
                    c[comp] = (c[comp] - minValue) / (maxValue - minValue);
                }
            }
    }
};

#endif

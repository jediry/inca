/* -*- C++ -*-
 *
 * File: WingedEdge-FaceVertex
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#ifndef INCA_POLY_WE_FACE_VERTEX
#define INCA_POLY_WE_FACE_VERTEX

// This is part of the Inca polygon modeling library
namespace inca {
    namespace poly {
        // Forward declarations
        template <typename scalar, size_t dim> class WEFaceVertex;
    };
};


template <typename  scalar, size_t dim>
class inca::poly::WEFaceVertex {
public:
    // Import typedefs from the PolygonMesh
    typedef WEPolygonMesh<scalar, dim>              PolygonMesh;
    typedef typename PolygonMesh::Vertex            Vertex;
    typedef typename PolygonMesh::Face              Face;
    typedef typename PolygonMesh::Edge              Edge;
    typedef typename PolygonMesh::PolygonMeshPtr    PolygonMeshPtr;
    typedef typename PolygonMesh::FaceVertex        FaceVertex;
    typedef typename PolygonMesh::VertexPtr         VertexPtr;
    typedef typename PolygonMesh::FacePtr           FacePtr;
    typedef typename PolygonMesh::EdgePtr           EdgePtr;
    typedef typename PolygonMesh::FaceVertexPtr     FaceVertexPtr;
    typedef typename PolygonMesh::VertexPtrList     VertexPtrList;
    typedef typename PolygonMesh::FacePtrList       FacePtrList;
    typedef typename PolygonMesh::EdgePtrList       EdgePtrList;
    typedef typename PolygonMesh::FaceVertexPtrList FaceVertexPtrList;

    typedef typename PolygonMesh::Point             Point;
    typedef typename PolygonMesh::Vector            Vector;
    typedef typename PolygonMesh::TexCoords         TexCoords;


/*---------------------------------------------------------------------------*
 | Constructors & data
 *---------------------------------------------------------------------------*/
public:
    // Reset this vertex to be unconnected
    void clear() {

    }

    // to-string cast operator
    operator string() const {
        stringstream ss;
        ss << "WE-FaceVertex(" << id << ')';
        return ss.str();
    }

    // Unique FaceVertex-ID accessors
    void setID(index_t i) { id = i; }
    index_t getID() const { return id; }

    // Normal accessors
    index_t normalIndex() const { return normIndex; }
    void setNormalIndex(index_t n) { normIndex = n; }
    const Vector & normal() { return mesh.normal(normIndex); }
    void setNormal(const Vector &v) { mesh.normal(normIndex) = v; }

    // TexCoords accessors
    index_t texCoordsIndex() const { return texIndex; }
    void setTexCoordsIndex(index_t t) { texIndex = t; }
    const TexCoords & texCoords() { return mesh.texCoords(texIndex); }
    void setTexCoords(const TexCoords &t) { mesh.texCoords(texIndex) = t; }

protected:
    index_t id;         // Unique FaceVertex ID in this PolygonMesh
    index_t normIndex,  // Index of the normal vector
            texIndex;   // Index of the texture coordinates
    PolygonMeshPtr mesh;// The mesh that we belong to
    VertexPtr vertex;   // The vertex we're attached to
    FacePtr face;       // The face we're attached to
    EdgePtr ccwEdge,    // The edges reached by going CCW/CW around this face
            cwEdge;


/*---------------------------------------------------------------------------*
 | Topology accessor functions
 *---------------------------------------------------------------------------*/
public:
    // PolygonMesh accessors
    void setMesh(PolygonMeshPtr m) { mesh = m; }
    PolygonMeshPtr getMesh() const { return mesh; }


    // Vertex accessors
    VertexPtr getVertex() const { return vertex; }
    void setVertex(VertexPtr v) { vertex = v; }
    bool touchesVertex(VertexPtr v) const { return vertex == v; }


    // Edge accessors
    EdgePtr getCWEdge()  const { return cwEdge; }
    void setCWEdge(EdgePtr e)  { cwEdge = e; }
    EdgePtr getCCWEdge() const { return ccwEdge; }
    void setCCWEdge(EdgePtr e) { ccwEdge = e; }
    bool touchesEdge(EdgePtr e) const { return e == ccwEdge || e == cwEdge; }


    // Face accessors
    FacePtr getFace() const { return face; }
    void setFace(FacePtr f) { face = f; }
    bool touchesFace(FacePtr f) const { return face == f; }


    // FaceVertex accessors
    FaceVertexPtr getCCWFaceVertexAroundFace() const {
        return cwEdge->getCCWFaceVertex(face);
    }
    FaceVertexPtr getCWFaceVertexAroundFace() const {
        return ccwEdge->getCWFaceVertex(face);
    }
    FaceVertexPtr getCCWFaceVertexAroundVertex() const {
        return ccwEdge->getCCWFaceVertex(vertex);
    }
    FaceVertexPtr getCWFaceVertexAroundVertex() const {
        return cwEdge->getCWFaceVertex(vertex);
    }
    bool touchesFaceVertex(FaceVertexPtr fv) const {
        if (fv->getVertex() != vertex)          return false;
        else if (fv->getCCWEdge() == cwEdge)    return true;
        else if (fv->getCWEdge() == ccwEdge)    return true;
        else                                    return false;
    }


/*---------------------------------------------------------------------------*
 | Mesh modification functions
 *---------------------------------------------------------------------------*/
public:
    // Insert this FaceVertex at 'v', with the specified Edges CW/CCW from it,
    // in a rotation around the vertex
    void insertBetween(VertexPtr v, EdgePtr ccw, EdgePtr cw) {
        // Do some sanity checks on the insert point
        if (cw->getCCWFaceVertex(v) != NULL) {
            cerr << *this << "::insertBetween(): There is already a "
                    "face-vertex at " << *v << " CCW from " << *cw << '\n';
            return;
        } else if (ccw->getCWFaceVertex(v) != NULL) {
            cerr << *this << "::insertBetween(): There is already a "
                    "face-vertex at " << *v << " CW from " << *ccw << '\n';
            return;
        } else if (cw->getCCWEdge(v) != ccw) {
            cerr << *this << "::insertBetween(): " << *ccw
                 << " is not CCW from " << *cw << " around " << *v << '\n';
            return;
        } else if (ccw->getCWEdge(v) != cw) {
            cerr << *this << "::insertBetween(): " << *cw
                 << " is not CW from " << *ccw << " around " << *v << '\n';
            return;
        } else if (ccw->getCWFace(v) != cw->getCCWFace(v)) {
            cerr << *this << "::insertBetween(): " << *cw << " and " << *ccw
                 << " do not border the same face at " << *v << '\n';
            return;
        } else {
            // Link me into this slot
            cwEdge = cw;
            ccwEdge = ccw;
            vertex = v;
            face = cw->getCCWFace(v);

            if (face == NULL)
                cerr << "Ack! Face is NULL for " << *this << endl;

            // Tell them I'm here
            cw->setCCWFaceVertex(v, this);
            ccw->setCWFaceVertex(v, this);
        }
    }
};


/*****************************************************************************
 * Non-member operators
 *****************************************************************************/
namespace inca {
    namespace poly {
        template <typename scalar, size_t dim>
        inline ostream & operator<<(ostream &o,
                                    const WEFaceVertex<scalar, dim> &fv) {
            return o << string(fv);
        }
    };
};

#endif

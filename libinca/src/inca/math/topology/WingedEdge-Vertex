/* -*- C++ -*-
 *
 * File: WingedEdge-Vertex
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#ifndef INCA_POLY_WE_VERTEX
#define INCA_POLY_WE_VERTEX

// This is part of the Inca polygon modeling library
namespace inca {
    namespace poly {
        // Forward declarations
        template <typename scalar, size_t dim> class WEVertex;
    };
};


template <typename scalar, size_t dim>
class inca::poly::WEVertex {
public:
    // Import typedefs from the PolygonMesh
    typedef WEPolygonMesh<scalar, dim>              PolygonMesh;
    typedef typename PolygonMesh::Vertex            Vertex;
    typedef typename PolygonMesh::Face              Face;
    typedef typename PolygonMesh::Edge              Edge;
    typedef typename PolygonMesh::FaceVertex        FaceVertex;
    typedef typename PolygonMesh::PolygonMeshPtr    PolygonMeshPtr;
    typedef typename PolygonMesh::VertexPtr         VertexPtr;
    typedef typename PolygonMesh::FacePtr           FacePtr;
    typedef typename PolygonMesh::EdgePtr           EdgePtr;
    typedef typename PolygonMesh::FaceVertexPtr     FaceVertexPtr;
    typedef typename PolygonMesh::VertexPtrList     VertexPtrList;
    typedef typename PolygonMesh::FacePtrList       FacePtrList;
    typedef typename PolygonMesh::EdgePtrList       EdgePtrList;

    typedef typename PolygonMesh::Point             Point;
    typedef typename PolygonMesh::Vector            Vector;


/*---------------------------------------------------------------------------*
 | Constructors & data
 *---------------------------------------------------------------------------*/
public:
    // Reset this vertex to be unconnected
    void clear() {
        edge = NULL;
    }

    // to-string cast operator
    operator string() const {
        stringstream ss;
        ss << "WE-Vertex(" << id << ')';
        return ss.str();
    }

    // Unique Vertex-ID accessors
    void setID(index_t i) { id = i; }
    index_t getID() const { return id; }

    // Location accessors
    index_t locationIndex() const { return locIndex; }
    void setLocationIndex(index_t i) { locIndex = i; }
    const Point & location() { return mesh->location(locIndex); }
    void setLocation(const Point &p) { mesh->location(locIndex) = p; }

protected:
    index_t id;         // Unique Vertex ID in this PolygonMesh
    index_t locIndex;   // Index of the vertex locationcoordinates
    PolygonMeshPtr mesh;// The mesh that we belong to
    EdgePtr edge;       // One of the edges adjacent to us


/*---------------------------------------------------------------------------*
 | Topology accessor functions
 *---------------------------------------------------------------------------*/
public:
    // PolygonMesh accessors
    void setMesh(PolygonMeshPtr m) { mesh = m; }
    PolygonMeshPtr getMesh() const { return mesh; }


    // Edge accessors
    EdgePtr getLinkEdge() const { return edge; }
    void setLinkEdge(EdgePtr e) { edge = e; }

    EdgePtr getEdgeBeforeCCW(FacePtr face) const {
        const VertexPtr thisVertex = const_cast<const VertexPtr>(this);
        EdgePtr result = NULL;

        // Start from our known edge, and orbit the vertex CCW
        EdgePtr current = edge;
        do {
            // If both this and its CCW neighbor border the face, this is it
            if (current->touchesFace(face)
                    && current->getCCWEdge(thisVertex)->touchesFace(face)) {
                result = current;
                break;
            } else {    //...keep trying
                current = current->getCCWEdge(thisVertex);
            }
        } while (current != edge);  // ...we're not done
        
        return result;
    }

    EdgePtr getEdgeBeforeCW(FacePtr face) const {
        const VertexPtr thisVertex = const_cast<const VertexPtr>(this);
        EdgePtr result = NULL;

        // Start from our known edge, and orbit the vertex CW
        EdgePtr current = edge;
        do {
            // If both this and its CW neighbor border the face, this is it
            if (current->touchesFace(face)
                    && current->getCWEdge(thisVertex)->touchesFace(face)) {
                result = current;
                break;
            } else {    //...keep trying
                current = current->getCWEdge(thisVertex);
            }
        } while (current != edge);  // ...we're not done
        
        return result;
    }

    EdgePtr getEdgeAfterCCW(FacePtr face) const {
        return getEdgeBeforeCW(face);
    }

    EdgePtr getEdgeAfterCW(FacePtr face) const {
        return getEdgeBeforeCCW(face);
    }
    
    size_t getAdjacentEdgeCount() const {
        const VertexPtr thisVertex = const_cast<const VertexPtr>(this);
        EdgePtr e = getLinkEdge();
        size_t count = 0;
        do {
            e = e->getCCWEdge(thisVertex);
            count++;
        } while (e != getLinkEdge());
        return count;
    }


    // Face accessors
    FacePtrList getAdjacentFaces() const {
        const VertexPtr thisVertex = const_cast<const VertexPtr>(this);
        FacePtrList faces;
        EdgePtr current = edge;
        do {
            FacePtr face = current->getCCWFace(thisVertex);
            faces.push_back(face);
            current = current->getCCWEdge(thisVertex);    // Next, please
        } while (current != edge);  // there are still more faces to see

        return faces;
    }

    size_t getAdjacentFaceCount() const {
        const VertexPtr thisVertex = const_cast<const VertexPtr>(this);
        EdgePtr e = getLinkEdge();
        size_t count = 0;
        do {
            if (e->getCCWFace(thisVertex) != NULL)
                count++;
            e = e->getCCWEdge(thisVertex);
        } while (e != getLinkEdge());
        return count;
    }
};


/*****************************************************************************
 * Non-member operators
 *****************************************************************************/
namespace inca {
    namespace poly {
        template <typename scalar, size_t dim>
        inline ostream & operator<<(ostream &o,
                                    const WEVertex<scalar, dim> &v) {
            return o << string(v);
        }
    };
};

#endif

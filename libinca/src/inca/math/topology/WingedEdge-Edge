/* -*- C++ -*-
 *
 * File: WingedEdge-Edge
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#ifndef INCA_POLY_WE_EDGE
#define INCA_POLY_WE_EDGE

// This is part of the Inca polygon modeling library
namespace inca {
    namespace poly {
        // Forward declarations
        template <typename scalar, size_t dim> class WEEdge;
    };
};

#include "NonManifoldGeometryException.hpp"

template <typename scalar, size_t dim>
class inca::poly::WEEdge {
public:
    // Import typedefs from the PolygonMesh
    typedef WEPolygonMesh<scalar, dim>              PolygonMesh;
    typedef typename PolygonMesh::Vertex            Vertex;
    typedef typename PolygonMesh::Face              Face;
    typedef typename PolygonMesh::Edge              Edge;
    typedef typename PolygonMesh::FaceVertex        FaceVertex;
    typedef typename PolygonMesh::PolygonMeshPtr    PolygonMeshPtr;
    typedef typename PolygonMesh::VertexPtr         VertexPtr;
    typedef typename PolygonMesh::FacePtr           FacePtr;
    typedef typename PolygonMesh::EdgePtr           EdgePtr;
    typedef typename PolygonMesh::FaceVertexPtr     FaceVertexPtr;
    typedef typename PolygonMesh::VertexPtrList     VertexPtrList;
    typedef typename PolygonMesh::FacePtrList       FacePtrList;
    typedef typename PolygonMesh::EdgePtrList       EdgePtrList;

    typedef typename PolygonMesh::Point             Point;
    typedef typename PolygonMesh::Vector            Vector;
    typedef typename PolygonMesh::TexCoords         TexCoords;


/*---------------------------------------------------------------------------*
 | Constructors & data
 *---------------------------------------------------------------------------*/
public:
    // Reset this edge to be unconnected
    void clear() {
        startVertex = endVertex = NULL;
        positiveFace = negativeFace = NULL;
        positiveCWEdge = positiveCCWEdge = this;
        negativeCWEdge = negativeCCWEdge = this;
        positiveCWFaceVertex = negativeCCWFaceVertex = NULL;
        negativeCWFaceVertex = positiveCCWFaceVertex = NULL;
    }

    // to-string cast operator
    operator string() const {
        stringstream ss;
        ss << "WE-Edge(" << id << ')';
        return ss.str();
    }

    // Unique Edge-ID access
    void setID(unsigned int i) { id = i; }
    unsigned int getID() const { return id; }

protected:
    index_t id;         // Unique Edge ID in this PolygonMesh

    // The mesh that we belong to
    PolygonMeshPtr mesh;

    // Starting and ending vertices
    VertexPtr startVertex, endVertex;

    // Adjacent faces, with CCW face-rotation with/against direction of edge
    FacePtr positiveFace, negativeFace;

    // Adjacent edges at each vertex (CW & CCW along a face rotation)
    EdgePtr positiveCWEdge, negativeCCWEdge, negativeCWEdge, positiveCCWEdge;
    
    // Adjacent face-vertices
    FaceVertexPtr positiveCWFaceVertex, negativeCCWFaceVertex,
                  negativeCWFaceVertex, positiveCCWFaceVertex;


/*---------------------------------------------------------------------------*
 | Mesh accessor functions
 *---------------------------------------------------------------------------*/
public:
    // PolygonMesh accessors
    void setMesh(PolygonMeshPtr m) { mesh = m; }
    PolygonMeshPtr getMesh() const { return mesh; }


/*---------------------------------------------------------------------------*
 | Vertex accessor functions
 *---------------------------------------------------------------------------*/
public:
    VertexPtr getStartVertex() const { return startVertex; }
    VertexPtr getEndVertex()   const { return endVertex; }
    void setStartVertex(const VertexPtr v) { startVertex = v; }
    void setEndVertex(const VertexPtr v)   { endVertex = v; }


    VertexPtr getCCWVertex(const FacePtr aroundFace) const {
        if (aroundFace == NULL)                 return NULL;
        else if (aroundFace == positiveFace)    return endVertex;
        else if (aroundFace == negativeFace)    return startVertex;
        else                                    return NULL;
    }

    VertexPtr getCWVertex(const FacePtr aroundFace) const {
        if (aroundFace == NULL)                 return NULL;
        else if (aroundFace == positiveFace)    return startVertex;
        else if (aroundFace == negativeFace)    return endVertex;
        else                                    return NULL;
    }

    void setCCWVertex(const FacePtr aroundFace, const VertexPtr vertex) {
        if (aroundFace == NULL)                 return;
        else if (aroundFace == positiveFace)    endVertex = vertex;
        else if (aroundFace == negativeFace)    startVertex = vertex;
        else                                    return;
    }

    void setCWVertex(const FacePtr aroundFace, const VertexPtr vertex) {
        if (aroundFace == NULL)                 return;
        else if (aroundFace == positiveFace)    startVertex = vertex;
        else if (aroundFace == negativeFace)    endVertex = vertex;
        else                                    return;
    }


    VertexPtr getOtherVertex(const VertexPtr fromVertex) const {
        if (fromVertex == NULL)                 return NULL;
        else if (fromVertex == startVertex)     return endVertex;
        else if (fromVertex == endVertex)       return startVertex;
        else                                    return NULL;
    }

    void setOtherVertex(const VertexPtr fromVertex, const VertexPtr vertex) {
        if (fromVertex == NULL)                 return;
        else if (fromVertex == startVertex)     endVertex = vertex;
        else if (fromVertex == endVertex)       startVertex = vertex;
        else                                    return;
    }


    bool touchesVertex(const VertexPtr vertex) const {
        return (vertex == startVertex || vertex == endVertex);
    }


/*---------------------------------------------------------------------------*
 | Face accessor functions
 *---------------------------------------------------------------------------*/
public:
    FacePtr getPositiveFace() const { return positiveFace; }
    FacePtr getNegativeFace() const { return negativeFace; }
    void setPositiveFace(const FacePtr f) { positiveFace = f; }
    void setNegativeFace(const FacePtr f) { negativeFace = f; }


    // Place the given face into the first available "slot" on this
    // edge (first try the positive face, then negative). If both
    // slots are taken, then we have a non-manifold condition, and
    // we blow up.
    void setAvailableFace(const FacePtr f) {
        if (positiveFace == NULL)       positiveFace = f;
        else if (negativeFace == NULL)  negativeFace = f;
        else {
            // Ack! We're trying to add 3 faces to this edge!
            NonManifoldGeometryException e;
            e << "Attempted to add third face(" << f->getID()
              << ") to an edge. The Winged-Edge structure only "
                 "supports 2-manifold solids.\n" << *this;
            throw e;
        }
    }

    FacePtr getCCWFace(const VertexPtr fromVertex) const {
        if (fromVertex == NULL)                 return NULL;
        else if (fromVertex == startVertex)     return positiveFace;
        else if (fromVertex == endVertex)       return negativeFace;
        else                                    return NULL;
    }

    FacePtr getCWFace(const VertexPtr fromVertex) const {
        if (fromVertex == NULL)                 return NULL;
        else if (fromVertex == startVertex)     return negativeFace;
        else if (fromVertex == endVertex)       return positiveFace;
        else                                    return NULL;
    }

    void setCCWFace(const VertexPtr fromVertex, const FacePtr face) {
        if (fromVertex == NULL)                 return;
        else if (fromVertex == startVertex)     positiveFace = face;
        else if (fromVertex == endVertex)       negativeFace = face;
        else                                    return;
    }

    void setCWFace(const VertexPtr fromVertex, const FacePtr face) {
        if (fromVertex == NULL)                 return;
        else if (fromVertex == startVertex)     negativeFace = face;
        else if (fromVertex == endVertex)       positiveFace = face;
        else                                    return;
    }


    FacePtr getOtherFace(const FacePtr fromFace) const {
        if (fromFace == NULL)                   return NULL;
        else if (fromFace == positiveFace)      return negativeFace;
        else if (fromFace == negativeFace)      return positiveFace;
        else                                    return NULL;
    }

    void setOtherFace(const FacePtr fromFace, FacePtr face) {
        if (fromFace == NULL)                   return;
        else if (fromFace == positiveFace)      negativeFace = face;
        else if (fromFace == negativeFace)      positiveFace = face;
        else                                    return;
    }


    bool touchesFace(const FacePtr face) const {
        return (face == positiveFace || face == negativeFace);
    }
    
    unsigned int getFaceCount() const {
        unsigned int result = 0;
        if (positiveFace != NULL)   result++;
        if (negativeFace != NULL)   result++;
        return result;
    }


/*---------------------------------------------------------------------------*
 | FaceVertex accessor functions
 *---------------------------------------------------------------------------*/
public:
    FaceVertexPtr getPositiveCCWFaceVertex() const { return positiveCCWFaceVertex; }
    FaceVertexPtr getPositiveCWFaceVertex()  const { return positiveCWFaceVertex; }
    FaceVertexPtr getNegativeCCWFaceVertex() const { return positiveCCWFaceVertex; }
    FaceVertexPtr getNegativeCWFaceVertex()  const { return negativeCWFaceVertex; }
    void setPositiveCCWFaceVertex(FaceVertexPtr fv) { positiveCCWFaceVertex = fv; }
    void setPositiveCWFaceVertex(FaceVertexPtr fv)  { positiveCWFaceVertex = fv; }
    void setNegativeCCWFaceVertex(FaceVertexPtr fv) { positiveCCWFaceVertex = fv; }
    void setNegativeCWFaceVertex(FaceVertexPtr fv)  { negativeCWFaceVertex = fv; }


    FaceVertexPtr getCCWFaceVertex(VertexPtr aroundVertex) const {
        if (aroundVertex == NULL)               return NULL;
        else if (aroundVertex == startVertex)   return positiveCWFaceVertex;
        else if (aroundVertex == endVertex)     return negativeCWFaceVertex;
        else                                    return NULL;
    }

    FaceVertexPtr getCWFaceVertex(const VertexPtr aroundVertex) const {
        if (aroundVertex == NULL)               return NULL;
        else if (aroundVertex == startVertex)   return negativeCCWFaceVertex;
        else if (aroundVertex == endVertex)     return positiveCCWFaceVertex;
        else                                    return NULL;
    }

    void setCCWFaceVertex(const VertexPtr aroundVertex, const FaceVertexPtr e) {
        if (aroundVertex == NULL)               return;
        else if (aroundVertex == startVertex)   positiveCWFaceVertex = e;
        else if (aroundVertex == endVertex)     negativeCWFaceVertex = e;
        else                                    return;
    }

    void setCWFaceVertex(const VertexPtr aroundVertex, const FaceVertexPtr e) {
        if (aroundVertex == NULL)               return;
        else if (aroundVertex == startVertex)   negativeCCWFaceVertex = e;
        else if (aroundVertex == endVertex)     positiveCCWFaceVertex = e;
        else                                    return;
    }


    // For the Face functions, NULL is an allowable value, meaning
    // the first uninitialized face.
    FaceVertexPtr getCCWFaceVertex(const FacePtr aroundFace) const {
        if (aroundFace == positiveFace)         return positiveCCWFaceVertex;
        else if (aroundFace == negativeFace)    return negativeCCWFaceVertex;
        else                                    return NULL;
    }

    FaceVertexPtr getCWFaceVertex(const FacePtr aroundFace) const {
        if (aroundFace == positiveFace)         return positiveCWFaceVertex;
        else if (aroundFace == negativeFace)    return negativeCWFaceVertex;
        else                                    return NULL;
    }

    void setCCWFaceVertex(const FacePtr aroundFace, const FaceVertexPtr fv) {
        if (aroundFace == NULL)                 return;
        else if (aroundFace == positiveFace)    positiveCCWFaceVertex = fv;
        else if (aroundFace == negativeFace)    negativeCCWFaceVertex = fv;
        else                                    return;
    }

    void setCWFaceVertex(const FacePtr aroundFace, const FaceVertexPtr fv) {
        if (aroundFace == NULL)                 return;
        else if (aroundFace == positiveFace)    positiveCWFaceVertex = fv;
        else if (aroundFace == negativeFace)    negativeCWFaceVertex = fv;
        else                                    return;
    }


    FaceVertexPtr getFaceVertex(const VertexPtr atVertex, const FacePtr onFace) const {
        if (atVertex == NULL)                   return NULL;
        else if (atVertex == startVertex) {
            if (onFace == positiveFace)             return positiveCWFaceVertex;
            else if (onFace == negativeFace)        return negativeCCWFaceVertex;
        } else if (atVertex == endVertex) {
            if (onFace == positiveFace)             return positiveCCWFaceVertex;
            else if (onFace == negativeFace)        return negativeCWFaceVertex;
        }
        return NULL;
    }

    FaceVertexPtr getFaceVertex(const VertexPtr atVertex, const EdgePtr onEdge) const {
        if (atVertex == NULL)                   return NULL;
        else if (atVertex == startVertex) {
            if (onEdge == positiveCWEdge)           return positiveCWFaceVertex;
            else if (onEdge == negativeCCWEdge)     return negativeCCWFaceVertex;
        } else if (atVertex == endVertex) {
            if (onEdge == positiveCCWEdge)          return positiveCCWFaceVertex;
            else if (onEdge == negativeCWEdge)      return negativeCWFaceVertex;
        }
        return NULL;
    }

    bool touchesFaceVertex(const FaceVertexPtr fv) const {
        if (positiveCCWFaceVertex == fv)        return true;
        else if (positiveCWFaceVertex == fv)    return true;
        else if (negativeCCWFaceVertex == fv)   return true;
        else if (negativeCWFaceVertex == fv)    return true;
        else                                    return false;
    }


/*---------------------------------------------------------------------------*
 | Edge accessor functions
 *---------------------------------------------------------------------------*/
public:
    EdgePtr getPositiveCCWEdge() const { return positiveCCWEdge; }
    EdgePtr getPositiveCWEdge()  const { return positiveCWEdge; }
    EdgePtr getNegativeCCWEdge() const { return negativeCCWEdge; }
    EdgePtr getNegativeCWEdge()  const { return negativeCWEdge; }
    void setPositiveCCWEdge(const EdgePtr e) { positiveCCWEdge = e; }
    void setPositiveCWEdge(const EdgePtr e)  { positiveCWEdge = e; }
    void setNegativeCCWEdge(const EdgePtr e) { negativeCCWEdge = e; }
    void setNegativeCWEdge(const EdgePtr e)  { negativeCWEdge = e; }


    EdgePtr getCCWEdge(const VertexPtr aroundVertex) const {
        if (aroundVertex == NULL)               return NULL;
        else if (aroundVertex == startVertex)   return positiveCWEdge;
        else if (aroundVertex == endVertex)     return negativeCWEdge;
        else                                    return NULL;
    }

    EdgePtr getCWEdge(const VertexPtr aroundVertex) const {
        if (aroundVertex == NULL)               return NULL;
        else if (aroundVertex == startVertex)   return negativeCCWEdge;
        else if (aroundVertex == endVertex)     return positiveCCWEdge;
        else                                    return NULL;
    }

    void setCCWEdge(const VertexPtr aroundVertex, const EdgePtr e) {
        if (aroundVertex == NULL)               return;
        else if (aroundVertex == startVertex)   positiveCWEdge = e;
        else if (aroundVertex == endVertex)     negativeCWEdge = e;
        else                                    return;
    }

    void setCWEdge(const VertexPtr aroundVertex, const EdgePtr e) {
        if (aroundVertex == NULL)               return;
        else if (aroundVertex == startVertex)   negativeCCWEdge = e;
        else if (aroundVertex == endVertex)     positiveCCWEdge = e;
        else                                    return;
    }


    // For the Face functions, NULL is an allowable value, meaning
    // the first uninitialized face.
    EdgePtr getCCWEdge(const FacePtr aroundFace) const {
        if (aroundFace == positiveFace)         return positiveCCWEdge;
        else if (aroundFace == negativeFace)    return negativeCCWEdge;
        else                                    return NULL;
    }

    EdgePtr getCWEdge(const FacePtr aroundFace) const {
        if (aroundFace == positiveFace)         return positiveCWEdge;
        else if (aroundFace == negativeFace)    return negativeCWEdge;
        else                                    return NULL;
    }

    void setCCWEdge(const FacePtr aroundFace, const EdgePtr e) {
        if (aroundFace == NULL)                 return;
        else if (aroundFace == positiveFace)    positiveCCWEdge = e;
        else if (aroundFace == negativeFace)    negativeCWEdge = e;
        else                                    return;
    }

    void setCWEdge(const FacePtr aroundFace, const EdgePtr e) {
        if (aroundFace == NULL)                 return;
        else if (aroundFace == positiveFace)    positiveCWEdge = e;
        else if (aroundFace == negativeFace)    negativeCCWEdge = e;
        else                                    return;
    }

    bool touchesEdge(const EdgePtr e) const {
        if (positiveCCWEdge == e)       return true;
        else if (positiveCWEdge == e)   return true;
        else if (negativeCCWEdge == e)  return true;
        else if (negativeCWEdge == e)   return true;
        else                            return false;
    }


/*---------------------------------------------------------------------------*
 | More complicated search functions
 *---------------------------------------------------------------------------*/
public:
    // These functions start from the current edge and orbit the
    // given vertex, looking for the end of the "fan" that this edge
    // beloings to. Equivalently, they look for the first NULL face.
    //
    // NULL is returned if we walk the whole orbit w/o finding a NULL
    // face.
    EdgePtr findCCWFanExtent(VertexPtr aroundVertex) {
        EdgePtr result = this;

        // If we can't trivially answer, we'll have to go hunting
        if (getCCWFace(aroundVertex) != NULL) {
            // We're gonna have to go hunt for it
            EdgePtr current = this;
            do {
                current = current->getCCWEdge(aroundVertex);
            } while (current->getCCWFace(aroundVertex) != NULL
                     && current != this);

            if (current == this)    result = NULL;
            else                    result = current;
        }
        return result;
    }

    EdgePtr findCWFanExtent(VertexPtr aroundVertex) {
        EdgePtr result = this;

        // If we can't trivially answer, we'll have to go hunting
        if (getCWFace(aroundVertex) != NULL) {
            // We're gonna have to go hunt for it
            EdgePtr current = this;
            do {
                current = current->getCWEdge(aroundVertex);
            } while (current->getCWFace(aroundVertex) != NULL
                     && current != this);

            if (current == this)    result = NULL;
            else                    result = current;
        }
        return result;
    }


/*---------------------------------------------------------------------------*
 | Mesh modification functions
 *---------------------------------------------------------------------------*/
public:
    void insertBeforeCCW(VertexPtr aroundVertex, EdgePtr e) {
        // Make sure we're not messing up a face
        if (getCWFace(aroundVertex) != NULL) {
            cerr << "Refusing to insert edge across the middle of a face.\n";
            return;
        }

        // Relink stuff
        EdgePtr prevEdge = getCWEdge(aroundVertex);
        e->setCWEdge(aroundVertex, prevEdge);
        e->setCCWEdge(aroundVertex, this);
        setCWEdge(e);
        prevEdge->setCCWEdge(e);
    }

    void insertBeforeCW(VertexPtr aroundVertex, EdgePtr e) {
        // Make sure we're not messing up a face
        if (getCCWFace(aroundVertex) != NULL) {
            cerr << "Refusing to insert edge across the middle of a face.\n";
            return;
        }

        // Relink stuff
        EdgePtr prevEdge = getCCWEdge(aroundVertex);
        e->setCCWEdge(aroundVertex, prevEdge);
        e->setCWEdge(aroundVertex, this);
        setCCWEdge(aroundVertex, e);
        prevEdge->setCWEdge(aroundVertex, e);
    }

    void insertAfterCCW(VertexPtr aroundVertex, EdgePtr e) {
        insertBeforeCW(aroundVertex, e);
    }

    void insertAfterCW(VertexPtr aroundVertex, EdgePtr e) {
        insertBeforeCCW(aroundVertex, e);
    }

    // XXX Should this do more checks (e.g. faces)?
    void extractFrom(VertexPtr aroundVertex) {
        // Go visit the neighbors
        EdgePtr nextEdgeCW = getCWEdge(aroundVertex),
                nextEdgeCCW = getCCWEdge(aroundVertex);
                
        // ...and introduce them to each other
        nextEdgeCW->setCCWEdge(aroundVertex, nextEdgeCCW);
        nextEdgeCCW->setCWEdge(aroundVertex, nextEdgeCW);
    }
};


/*****************************************************************************
 * Non-member operators
 *****************************************************************************/
namespace inca {
    namespace poly {
        template <typename scalar, size_t dim>
        inline ostream & operator<<(ostream &o,
                                    const WEEdge<scalar, dim> &e) {
            return o << string(e);
        }
    };
};

#endif

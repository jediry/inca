/* -*- C++ -*-
 *
 * File: WingedEdge-Face
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2003, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 */

#ifndef INCA_POLY_WE_FACE
#define INCA_POLY_WE_FACE

// This is part of the Inca polygon modeling library
namespace inca {
    namespace poly {
        // Forward declarations
        template <typename scalar, size_t dim> class WEFace;
    };
};


template <typename scalar, unsigned int dim>
class inca::poly::WEFace {
public:
    // Import typedefs from the PolygonMesh
    typedef WEPolygonMesh<scalar, dim>              PolygonMesh;
    typedef typename PolygonMesh::Vertex            Vertex;
    typedef typename PolygonMesh::Face              Face;
    typedef typename PolygonMesh::Edge              Edge;
    typedef typename PolygonMesh::FaceVertex        FaceVertex;
    typedef typename PolygonMesh::PolygonMeshPtr    PolygonMeshPtr;
    typedef typename PolygonMesh::VertexPtr         VertexPtr;
    typedef typename PolygonMesh::FacePtr           FacePtr;
    typedef typename PolygonMesh::EdgePtr           EdgePtr;
    typedef typename PolygonMesh::FaceVertexPtr     FaceVertexPtr;
    typedef typename PolygonMesh::VertexPtrList     VertexPtrList;
    typedef typename PolygonMesh::FacePtrList       FacePtrList;
    typedef typename PolygonMesh::EdgePtrList       EdgePtrList;

    typedef typename PolygonMesh::Point             Point;
    typedef typename PolygonMesh::Vector            Vector;
    typedef typename PolygonMesh::TexCoords         TexCoords;


/*---------------------------------------------------------------------------*
 | Constructors & data
 *---------------------------------------------------------------------------*/
public:
    // Reset this vertex to be unconnected
    void clear() {
        edge = NULL;
    }

    // to-string cast operator
    operator string() const {
        stringstream ss;
        ss << "WE-Face(" << id << ')';
        return ss.str();
    }

    // Unique Face-ID accessor
    void setID(unsigned int i) { id = i; }
    unsigned int getID() const { return id; }

    // Material accessor
    void setMaterial(index_t m) { matIndex = m; }
    index_t material() const { return matIndex; }

protected:
    index_t id;         // Unique Face ID in this PolygonMesh
    index_t matIndex;   // The material this face is made of
    PolygonMeshPtr mesh;// The mesh that we belong to
    EdgePtr edge;       // One of the edges adjacent to us


/*---------------------------------------------------------------------------*
 | Topology accessor functions
 *---------------------------------------------------------------------------*/
public:
    // PolygonMesh accessors
    void setMesh(PolygonMeshPtr m) { mesh = m; }
    PolygonMeshPtr getMesh() const { return mesh; }


    // Vertex accessors
    size_t getVertexCount() const {
        const FacePtr thisFace = const_cast<const FacePtr>(this);
        EdgePtr e = getLinkEdge();
        unsigned int count = 0;
        if (e != NULL) {
            VertexPtr v = e->getCWVertex(thisFace);
            do {
                v = e->getOtherVertex(v);
                e = e->getCCWEdge(thisFace);
                count++;
            } while (e != getLinkEdge());
        }
        return count;
    }

    VertexPtrList vertices() const {
        const FacePtr thisFace = const_cast<const FacePtr>(this);
        VertexPtrList vtx;
        EdgePtr e = edge;
        VertexPtr start = e->getCWFaceVertex(thisFace);
        VertexPtr v = e->getOtherVertex(start);
        
        vtx.push_back(start);

        do {
            vtx.push_back(v);               // Add in the current vertex
            e = e->getCCWEdge(thisFace);    // Advance to the next edge
            v = e->getCCWVertex(thisFace);  // Advance to the next vertex
//            cerr << "Edge[" << e->id << "], Vertex[" << v->id << "], Start[" << start->id << "]\n";
        } while (v != start);
        
        return vtx;
    }

    // Edge accessors
    size_t getEdgeCount() const {
        return getVertexCount();
    }

    EdgePtr getLinkEdge() const { return edge; }
    void setLinkEdge(EdgePtr e) { edge = e; }


    // FaceVertex accessors
    FaceVertexPtr getFirstFaceVertex() const {
        const FacePtr thisFace = const_cast<const FacePtr>(this);
        VertexPtr v = edge->getStartVertex();
        return edge->getFaceVertex(v, thisFace);
    }

    FaceVertexPtr getLastFaceVertex() const {
        const FacePtr thisFace = const_cast<const FacePtr>(this);
        VertexPtr v = edge->getStartVertex();
        FaceVertexPtr fv = edge->getFaceVertex(v, thisFace);
        return fv->getCWFaceVertexAroundFace();
    }
};


/*****************************************************************************
 * Non-member operators
 *****************************************************************************/
namespace inca {
    namespace poly {
        template <typename scalar, size_t dim>
        inline ostream & operator<<(ostream &o,
                                    const WEFace<scalar, dim> &f) {
            return o << string(f);
        }
    };
};

#endif

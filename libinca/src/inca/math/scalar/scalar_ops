/** -*- C++ -*-
 *
 * File: scalar_ops
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file declares the various operations that work on scalar types.
 *      It contains template functions for doing all the normal mathmatical
 *      operations.
 *
 *      First off, this file implements free-floating functions defined in the
 *      inca::math namespace. These functions (which you don't really want to
 *      mess with) handle correctly passing their arguments by value or by
 *      reference (see the scalar_types for further discussion on this) and
 *      just pass-thru to the real implementations in the scalar_*_functions
 *      templates (these extra function calls will be optimized away at compile
 *      time). If you want to implement a specialized version of these
 *      functions, you should specialize one or more of the following templates:
 *          scalar_arithmetic_functions
 *          scalar_transcendental_functions
 */

#ifndef INCA_MATH_SCALAR_OPS
#define INCA_MATH_SCALAR_OPS

// Import system configuration
#include <inca/inca-common.h>

namespace inca {
    namespace math {
        // Forward declarations
        template <typename scalar> struct scalar_integer_api;
        template <typename scalar> struct scalar_arithmetic_api;
        template <typename scalar> struct scalar_algebraic_api;
        template <typename scalar> struct scalar_transcendental_api;
    };
};

// Import scalar type definition
#include "scalar_types"

// These preprocessor macros are only used locally within this file, and
// help make all the template crap readable. They should all be #undef'd at
// the end of this file.
#define TRAITS      scalar_traits<scalar>

// These macros represent allow us to choose which overload of each function
// gets called, based on whether the scalar_traits for this type of scalar
// says the scalar should be passed by value or by reference. Whee!
#define BY_VALUE    TRAITS::pass_by_value
#define BY_REF    ! TRAITS::pass_by_value

// This macro allows us to constrain whether a function will even be
// considered as a possible overload for a particular scalar type.
#define SUPPORTS(CATEGORY) TRAITS::supports_ ## CATEGORY ## _ops


// These macros let us define the scalar pass-thru functions in only one
// line apiece. They all have nearly identical structure, having two separate
// versions, one of which takes its arguments by value and the other of which
// takes them by reference. Both types simply pass their arguments through to
// the real function implementations which are contained in the
// scalar_*_functions templates, which is where specialization should be done
// for new scalar models.
#define SCALAR_FUNCTION_1_ARG(CATEGORY, RETURN, NAME)                       \
    template <typename scalar>                                              \
    RETURN NAME(scalar const s,                                             \
                ENABLE_FUNCTION_IF_C(BY_VALUE && SUPPORTS(CATEGORY))) {     \
        return scalar_##CATEGORY##_api<scalar>::NAME(s);                    \
    }                                                                       \
    template <typename scalar>                                              \
    RETURN NAME(scalar const & s,                                           \
                ENABLE_FUNCTION_IF_C(BY_REF && SUPPORTS(CATEGORY))) {       \
        return scalar_##CATEGORY##_api<scalar>::NAME(s);                    \
    }

#define SCALAR_FUNCTION_2_ARG(CATEGORY, RETURN, NAME)                       \
    template <typename scalar>                                              \
    RETURN NAME(scalar const s1, scalar const s2,                           \
                ENABLE_FUNCTION_IF_C(BY_VALUE && SUPPORTS(CATEGORY))) {     \
        return scalar_##CATEGORY##_api<scalar>::NAME(s1, s2);               \
    }                                                                       \
    template <typename scalar>                                              \
    RETURN NAME(scalar const s1, scalar const s2,                           \
                ENABLE_FUNCTION_IF_C(BY_REF && SUPPORTS(CATEGORY))) {       \
        return scalar_##CATEGORY##_api<scalar>::NAME(s1, s2);               \
    }


// Import the Inca template metaprogramming utilities
#include <inca/util/metaprogramming/macros.hpp>


// These are the free-floating scalar math functions. All of the usual
// functions are implemented, but as you can see, they simply pass-thru to
// the real implementations which are in the scalar_*_functions template
// classes. For each function, there are two versions: one that takes scalar
// parameters by value and one that takes them by reference. This allows
// different scalar implementations to pass their arguments in different ways
// (e.g., it would be bad to pass GMP arbitrary-precision reals by value!).
namespace inca {
    namespace math {
    /*-----------------------------------------------------------------------*
     | Arithmetic functions
     *-----------------------------------------------------------------------*/
        // Boolean comparison functions
        SCALAR_FUNCTION_1_ARG(arithmetic, bool, isNan);            // isNaN(x)
        SCALAR_FUNCTION_1_ARG(arithmetic, bool, effectivelyZero);  // x ~= 0
        SCALAR_FUNCTION_2_ARG(arithmetic, bool, effectivelyEqual); // x ~= y
        SCALAR_FUNCTION_2_ARG(arithmetic, bool, effectivelyLessThan); // x ~< y
        SCALAR_FUNCTION_2_ARG(arithmetic, bool, effectivelyGreaterThan); // x ~< y
        SCALAR_FUNCTION_2_ARG(arithmetic, bool, effectivelyLessThanOrEqualTo); // x ~<= y
        SCALAR_FUNCTION_2_ARG(arithmetic, bool, effectivelyGreaterThanOrEqualTo); // x ~>= y

        // $0.99 calculator stuff
        SCALAR_FUNCTION_1_ARG(arithmetic, scalar, negate);       // -x
        SCALAR_FUNCTION_2_ARG(arithmetic, scalar, sum);          // x + y
        SCALAR_FUNCTION_2_ARG(arithmetic, scalar, difference);   // x - y
        SCALAR_FUNCTION_2_ARG(arithmetic, scalar, product);      // x * y
        SCALAR_FUNCTION_2_ARG(arithmetic, scalar, quotient);     // x / y
        SCALAR_FUNCTION_2_ARG(arithmetic, scalar, modulus);      // x % y

        // Selection functions
        SCALAR_FUNCTION_2_ARG(arithmetic, scalar, min);          // min(x, y)
        SCALAR_FUNCTION_2_ARG(arithmetic, scalar, max);          // max(x, y)

        // Non numbers
        template <typename scalar>
        scalar INF() { return scalar_traits<scalar>::infinity(); }

        // Single argument arithmetic functions
        SCALAR_FUNCTION_1_ARG(arithmetic, scalar, abs);          // |x|
        SCALAR_FUNCTION_1_ARG(arithmetic, scalar, floor);        // |.x.|
        SCALAR_FUNCTION_1_ARG(arithmetic, scalar, ceiling);      // |'x'|
        SCALAR_FUNCTION_1_ARG(arithmetic, scalar, round);        // round(x)


    /*-----------------------------------------------------------------------*
     | Algebraic Functions
     *-----------------------------------------------------------------------*/
        // Determine the square root of a scalar
        SCALAR_FUNCTION_1_ARG(algebraic, scalar, sqrt);          // sqrt(x)


    /*-----------------------------------------------------------------------*
     | Transcendental Functions
     *-----------------------------------------------------------------------*/
        // Power/log functions
        SCALAR_FUNCTION_2_ARG(transcendental, scalar, pow);      // x^y
        SCALAR_FUNCTION_2_ARG(transcendental, scalar, log);      // log_x(y)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, exp);      // e^x
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, ln);       // ln(x)

        // Trigonometric functions (in radians)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, sin);      // sin(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, cos);      // cos(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, tan);      // tan(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, cot);      // cot(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, sec);      // sec(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, csc);      // csc(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, arcsin);   // sin^-1(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, arccos);   // cos^-1(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, arctan);   // tan^-1(x)
        SCALAR_FUNCTION_2_ARG(transcendental, scalar, arctan);   // tan^-1(x,y)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, arccot);   // cot^-1(x)
        SCALAR_FUNCTION_2_ARG(transcendental, scalar, arccot);   // cot^-1(x,y)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, arcsec);   // sec^-1(x)
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, arccsc);   // csc^-1(x)

        // Transcendental numbers
#if 0
        template <typename scalar>
        scalar PI(CONSTRAINT_TRANSCENDENTAL) { return scalar_transcendental_api<scalar>::PI(); }
        template <typename scalar>
        scalar E(CONSTRAINT_TRANSCENDENTAL) { return scalar_transcendental_api<scalar>::E(); }
#endif
        template <typename scalar>
        scalar PI() { return scalar_transcendental_api<scalar>::PI(); }
        template <typename scalar>
        scalar E() { return scalar_transcendental_api<scalar>::E(); }


    /*-----------------------------------------------------------------------*
     | Conversion functions
     *-----------------------------------------------------------------------*/
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, radiansToDegrees);
        SCALAR_FUNCTION_1_ARG(transcendental, scalar, degreesToRadians);
    };
};


// The default implementation is sufficient for integral types
template <typename scalar>
struct inca::math::scalar_arithmetic_api {
    // Make aliases for the associated types
    typedef scalar_traits<scalar>       traits;
    typedef typename traits::value_type value_type;
    typedef typename traits::arg_type   arg_type;

    // Standard 4-function calculator stuff
    static value_type negate(arg_type s)                    { return -s; }
    static value_type add(arg_type s1, arg_type s2)         { return s1 + s2; }
    static value_type subtract(arg_type s1, arg_type s2)    { return s1 - s2; }
    static value_type multiply(arg_type s1, arg_type s2)    { return s1 * s2; }
    static value_type quotient(arg_type s1, arg_type s2)    { return s1 / s2; }
    static value_type modulus(arg_type s1, arg_type s2);

    // Selection functions
    static value_type min(arg_type s1, arg_type s2) { return (s1 < s2 ? s1 : s2); }
    static value_type max(arg_type s1, arg_type s2) { return (s1 > s2 ? s1 : s2); }

    // Comparison functions (trivial for integers)
    static bool isNaN(arg_type s) { return false; }
    static bool effectivelyZero(arg_type s) {
        if (traits::is_integral)
            return (s == 0);
        else
            return (abs(s) <= traits::absolute_tolerance());
    }
    static bool effectivelyEqual(arg_type s1, arg_type s2) {
        if (traits::is_integral)
            return (s1 == s2);
        else {
            value_type diff = abs(s1 - s2);
            if (diff <= traits::absolute_tolerance())// Absolutely close together?
                return true;
            else                                     // Relatively close together?
                return diff <= traits::relative_tolerance() * max(abs(s1), abs(s2));
        }
    }
    static bool effectivelyLessThan(arg_type s1, arg_type s2) {
        if (traits::is_integral)
            return (s1 < s2);
        else
            return s1 < s2 && ! effectivelyEqual(s1, s2);
    }
    static bool effectivelyGreaterThan(arg_type s1, arg_type s2) {
        if (traits::is_integral)
            return (s1 > s2);
        else
            return s1 > s2 && ! effectivelyEqual(s1, s2);
    }
    static bool effectivelyLessThanOrEqual(arg_type s1, arg_type s2) {
        if (traits::is_integral)
            return (s1 <= s2);
        else
            return s1 >= s2 || effectivelyEqual(s1, s2);
    }
    static bool effectivelyGreaterThanOrEqual(arg_type s1, arg_type s2) {
        if (traits::is_integral)
            return (s1 >= s2);
        else
            return s1 >= s2 || effectivelyEqual(s1, s2);
    }

    // Determine the absolute value of a scalar
    static value_type abs(arg_type s);

    // Rounding functions (trivial for integers)
    static value_type floor(arg_type s);
    static value_type ceiling(arg_type s);
    static value_type round(arg_type s);
};


template <typename scalar>
struct inca::math::scalar_algebraic_api {
    // Make aliases for the associated types
    typedef scalar_traits<scalar>       traits;
    typedef typename traits::value_type value_type;
    typedef typename traits::arg_type   arg_type;

    static value_type sqrt(arg_type s);
};


template <typename scalar>
struct inca::math::scalar_transcendental_api {
    // Make aliases for the associated types
    typedef scalar_traits<scalar>       traits;
    typedef typename traits::value_type value_type;
    typedef typename traits::arg_type   arg_type;

    // Our favorite transcendental numbers
    static value_type PI();
    static value_type E();

    // Conversion functions
    static value_type radiansToDegrees(arg_type s) {
        return s * value_type(180) / PI();
    }
    static value_type degreesToRadians(arg_type s) {
        return s / value_type(180) * PI();
    }

    // Power/logrithm functions
    static value_type pow(arg_type base, arg_type power);
    static value_type log(arg_type base, arg_type s);
    static value_type exp(arg_type power);
    static value_type ln(arg_type s);

    // Trigonometric functions
    static value_type sin(arg_type s);
    static value_type cos(arg_type s);
    static value_type tan(arg_type s);
    static value_type cot(arg_type s);
    static value_type sec(arg_type s);
    static value_type csc(arg_type s);
    static value_type arcsin(arg_type s);
    static value_type arccos(arg_type s);
    static value_type arctan(arg_type s);
    static value_type arctan(arg_type sin, arg_type cos);
    static value_type arccot(arg_type s);
    static value_type arccot(arg_type csc, arg_type sec);
    static value_type arcsec(arg_type s);
    static value_type arccsc(arg_type s);
};


// Clean up this travesty we've made of the preprocessor namespace
#undef TRAITS
#undef BY_VALUE
#undef BY_REF
#undef SUPPORTS
#undef SCALAR_FUNCTION_1_ARG
#undef SCALAR_FUNCTION_2_ARG

#define UNDEFINE_INCA_METAPROGRAMMING_MACROS
#include <inca/util/metaprogramming/macros.hpp>

#endif


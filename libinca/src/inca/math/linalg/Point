/** -*- C++ -*-
 *
 * \file Point
 *
 * \author Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      The Point template class describes an infinitesimal location in
 *      n-space. The usual vector mathematics operations are defined for it.
 */

#ifndef INCA_MATH_LINALG_POINT
#define INCA_MATH_LINALG_POINT

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca math library
namespace inca {
    namespace math {
        // Forward declarations
        template <typename scalar, inca::SizeType dim> class Point;
    };
};

// Import STL algorithms
#include <algorithm>

// Import scalar math implementation
#include "../scalar.hpp"

// Import superclass and related class definitions
#include <inca/util/Array>
#include "Quaternion"

// Import multi-dimensional preprocessor metaprogramming macros
#include <inca/util/multi-dimensional-macros.hpp>


template <typename scalar, inca::SizeType dim>
class inca::math::Point : public inca::Array<scalar, dim> {
/*---------------------------------------------------------------------------*
 | Type/constant declarations
 *---------------------------------------------------------------------------*/
public:
    // Scalar typedefs
    INCA_MATH_SCALAR_TYPES(scalar, IS_WITHIN_TEMPLATE);

    // How many dimensions do I have?
    static const SizeType dimensionality = dim;


/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    /**
     * Default (no initialization) constructor.
     */
    explicit Point() { }

    /**
     * Initialization from another Point, possibly of a different scalar
     * type. The argument must be of the same dimensionality, and its
     * scalar type must be convertible to scalar_t.
     */
    template <typename scalar2>
    Point(const Point<scalar2, dimensionality> &p) {
        std::copy(p.begin(), p.end(), begin());
    }

    /**
     * Initialization from an Array (or subclass).
     */
    explicit Point(const Array<scalar_t, dimensionality> &arr) {
        std::copy(arr.begin(), arr.end(), begin());
    }

    /**
     * Constant element initialization constructor.
     */
    explicit Point(scalar_arg_t e) {
        std::fill(begin(), end(), e);
    }
 
    /**
     * C-style array constructor. The element type must be convertible to
     * scalar_t.
     */
    template <typename scalar2>
    explicit Point(scalar2 * arr) {
        std::copy(arr, arr + static_size, begin());
    }

    /**
     * scalar_arg_t argument list constructors. Each of these is intended to
     * be used only with instances of the same dimensionality as there are
     * arguments. Attempting to invoke a constructor for a different
     * dimensionality will cause a compile-time failure.
     */
    #define CREATE_DIMENSIONAL_CONSTRUCTOR(DIM)                             \
        explicit Point(PARAMS(DIM, scalar_arg_t s))                         \
            : Array<scalar_t, dimensionality>(PARAMS(DIM, s)) { }
    FOR_ALL_DIMS(CREATE_DIMENSIONAL_CONSTRUCTOR);
    #undef CREATE_DIMENSIONAL_CONSTRUCTOR

    /**
     * Initialization from a Quaternion. This is only valid for 3D Vectors,
     * and the Quaternion's scalar type must be convertible to scalar_t.
     */
    template <typename scalar2>
    explicit Point(const Quaternion<scalar2> &q) {
        BOOST_STATIC_ASSERT(dimensionality == 3);  // Only works for 3D Points
        std::copy(q.begin() + 1, q.end(), begin());
    }


/*---------------------------------------------------------------------------*
 | Type-conversion functions
 *---------------------------------------------------------------------------*/
public:
    /**
     * Cast to string representation.
     * \returns a string like "(1.4, 3.5)"
     */
    operator std::string() const {
        return '(' + stringifyElements() + ')';
    }
};

// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_MULTI_DIM_MACROS
#include <inca/util/multi-dimensional-macros.hpp>

#endif

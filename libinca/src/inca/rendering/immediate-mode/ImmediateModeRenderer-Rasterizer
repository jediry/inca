/** -*- C++ -*-
 *
 * File: ImmediateModeRenderer-Rasterizer
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file defines the Rasterizer inner class belonging to
 *      ImmediateModeRenderer. The Rasterizer represents the renderer's
 *      rasterization-related state variables.
 *
 *      This file is not meant to be used directly, but is included by
 *      the main ImmediateModeRenderer header file.
 *
 * FIXME: Should be able to turn on/off vertex/primitive counting with a template parameter
 */

#ifndef INCA_RENDERING_IMMEDIATE_MODE_RENDERER_RASTERIZER
#define INCA_RENDERING_IMMEDIATE_MODE_RENDERER_RASTERIZER

// Import rendering primitive data structure
#include "PrimitiveArray"


RENDERER_TEMPLATE
class RENDERER::Rasterizer
    : public RENDERER::Component,
      protected CachePolicy<API::FirstRasterizerProperty,
                            API::LastRasterizerProperty> {
/*---------------------------------------------------------------------------*
 | Constructor & destructor
 *---------------------------------------------------------------------------*/
public:
    // Constructor
    Rasterizer(RENDERER &r) : Component(r, 0) { }

    // Destructor
    virtual ~Rasterizer() { }


/*---------------------------------------------------------------------------*
 | Rasterization mode/feature toggles
 *---------------------------------------------------------------------------*/
public:
    TOGGLE_PROPERTY(DepthBuffering)
    TOGGLE_PROPERTY(AlphaBlending)
    TOGGLE_PROPERTY(Lighting)
    TOGGLE_PROPERTY(PointSmoothing)
    TOGGLE_PROPERTY(LineSmoothing)
    TOGGLE_PROPERTY(PolygonSmoothing)


/*---------------------------------------------------------------------------*
 | Rasterization parameter functions
 *---------------------------------------------------------------------------*/
public:
    VALUE_PROPERTY(Color,           BackgroundColor,    backgroundColor)
    VALUE_PROPERTY(ShadingModel,    ShadingModel,       shadingModel)
    VALUE_PROPERTY(geometry_t,      PointDiameter,      pointDiameter)
    VALUE_PROPERTY(geometry_t,      LineWidth,          lineWidth)
    VALUE_PROPERTY(Color,           CurrentColor,       currentColor)
    VALUE_PROPERTY(Normal,          CurrentNormal,      currentNormal)
    VALUE_PROPERTY(TexCoord,        CurrentTexCoord,    currentTexCoords)
    VALUE_PROPERTY(bool,            CurrentEdgeFlag,    currentEdgeFlag)

    // Scalar-list versions
    // FIXME: scalar versions of setNormal, etc.


/*---------------------------------------------------------------------------*
 | Vertex-array functions
 *---------------------------------------------------------------------------*/
public:
    // Multi-type primitive array data
    template <typename v, typename n, typename t, typename c, typename e>
    void setPrimitiveArray(const PrimitiveArray<v, n, t, c, e> & p) {
        // Set up the vertex arrays
        setVertexArray(p.vertices());
        setNormalArray(p.normals());
        setTexCoordArray(p.texCoords());
        setColorArray(p.colors());
        setEdgeFlagArray(p.edgeFlags());
    }

    ARRAY_PROPERTY(VertexArray,   vertexArray)
    ARRAY_PROPERTY(NormalArray,   normalArray)
    ARRAY_PROPERTY(TexCoordArray, texCoordArray)
    ARRAY_PROPERTY(ColorArray,    colorArray)
    ARRAY_PROPERTY(EdgeFlagArray, edgeFlagArray)


/*---------------------------------------------------------------------------*
 | Primitive rendering functions
 *---------------------------------------------------------------------------*/
public:
    // Start/end rendering a geometric primitive
    void beginPrimitive(PrimitiveType type) {
        _vertexCount = 0;
        API::beginPrimitive(type);
    }
    void endPrimitive() {
        API::endPrimitive();
    }

    // Create a vertex at a point
    template <typename scalar, SizeType dim>
    void vertexAt(const math::Point<scalar, dim> & p) {
        ++_vertexCount;
        API::renderVertex(p);
    }

    // Create a vertex using the data in the currently enabled arrays
    void vertexIndex(IndexType index) {
        ++_vertexCount;
        API::renderVertexIndex(index);
    }

    // Render a range of vertices from the current primitive arrays
    void renderPrimitive(PrimitiveType type, IndexType from, SizeType count) {
        _vertexCount += count;
        API::renderArrayRange(type, from, count);
    }
//     void vertexRange(IndexType from, IndexType to) {
//         _vertexCount += to - from + 1;
//         API::renderVertexIndexRange(from, to);
//     }

protected:
    // How many vertices have we rendered in the current begin/end pair?
    int _vertexCount;
};

#endif

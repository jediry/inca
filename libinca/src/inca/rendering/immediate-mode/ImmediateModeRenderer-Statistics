/** -*- C++ -*-
 *
 * File: ImmediateModeRenderer-Statistics
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *
 *      This file is not meant to be used directly, but is included by
 *      the main ImmediateModeRenderer header file.
 */


#ifndef INCA_RENDERING_IMMEDIATE_MODE_RENDERER_STATISTICS
#define INCA_RENDERING_IMMEDIATE_MODE_RENDERER_STATISTICS

// Import Timer definition
#include <inca/util/Timer>


// These macros do bounds checking on the parameters to these functions.
// Note that these bounds checks are disabled if INCA_DO_BOUNDS_CHECKS
// is zero or undefined. See inca/util/OutOfBoundsException for more info.
#define CHECK_VALID_PRIMITIVE_TYPE(TYPE)                                    \
    INCA_BOUNDS_CHECK(0, PRIMITIVE_TYPE_COUNT - 1, TYPE, -1,                \
                      "invalid primitive type " << TYPE)

#define CHECK_VALID_RENDER_PASS(PASS)                                       \
    INCA_BOUNDS_CHECK(0, RENDER_PASS_COUNT - 1, PASS, -1,                   \
                      "invalid render pass " << PASS)


RENDERER_TEMPLATE
class RENDERER::Statistics : public RENDERER::Component {
public:
    // Timer typedefs
    typedef inca::Timer<timer_t>    Timer;
    static const SizeType PRIMITIVE_TYPE_COUNT = ALL_PRIMITIVE_TYPES;
    static const SizeType RENDER_PASS_COUNT    = ALL_RENDER_PASSES;

    // Constructor
    Statistics() { reset(); }


/*---------------------------------------------------------------------------*
 | Modifier functions
 *---------------------------------------------------------------------------*/
    void reset() {
        // Zero our counters
        _frameCount = 0;
        _vertexCount = 0;
        for (IndexType i = 0; i < PRIMITIVE_TYPE_COUNT; i++) {
            _vertexTypeCounts[i];
            for (IndexType j = 0; j < RENDER_PASS_COUNT; j++)
                _vertexTypePassCounts[i][j];
        }

        // Zero our timers
        _renderTime.reset();
        _realTime.reset();
        for (IndexType i = 0; i < RENDER_PASS_COUNT; i++)
            _renderPassTimes[i].reset();

        // Start the real-time timer going
        _realTime.start();
    }

    void beginFrame() {
        _frameCount++;
        _renderTime.start();
    }
    void endFrame() {
        _renderTime.stop();
    }

    void beginRenderPass(IndexType pass) {
        CHECK_VALID_RENDER_PASS(pass)
        _renderPassTimes[pass].start();
    }
    void endRenderPass(IndexType pass) {
        CHECK_VALID_RENDER_PASS(pass)
        _renderPassTimes[pass].stop();
    }

    void vertexRendered(IndexType type, IndexType pass, int count = 1) {
        CHECK_VALID_PRIMITIVE_TYPE(type)
        CHECK_VALID_RENDER_PASS(pass)
        _vertexTypeCounts[type] += count;
        _vertexTypePassCounts[type][pass] += count;
        _vertexCount += count;
    }


/*---------------------------------------------------------------------------*
 | Query functions
 *---------------------------------------------------------------------------*/
    SizeType frameCount() const {
        return _frameCount;
    }

    SizeType primitiveCount() const {
        return _vertexCount;
    }

    SizeType primitiveCount(IndexType type) const {
        CHECK_VALID_PRIMITIVE_TYPE(type)
        return _vertexTypeCounts[type];
    }

    SizeType primitiveCount(IndexType type, IndexType pass) const {
        CHECK_VALID_PRIMITIVE_TYPE(type)
        CHECK_VALID_RENDER_PASS(pass)
        return _vertexTypePassCounts[type][pass];
    }

    timer_t realTime() const { return _realTime.getTime(); }
    timer_t renderTime() const { return _renderTime.getTime(); }
    timer_t renderTime(IndexType pass) const {
        CHECK_VALID_RENDER_PASS(pass)
        return _renderPassTimes[pass].getTime();
    }

    timer_t framesPerSecond() const {
        timer_t time = _realTime.getTime();
        if (time == timer_t(0.0))   return timer_t(0.0);
        else                        return _frameCount / time;
    }

protected:
    // Number of frames rendered
    SizeType _frameCount;

    // Accounting of rendered primitives
    SizeType _vertexCount;
    SizeType _vertexTypeCounts[PRIMITIVE_TYPE_COUNT];
    SizeType _vertexTypePassCounts[PRIMITIVE_TYPE_COUNT][RENDER_PASS_COUNT];

    // Timers for keeping track of where our render time is spent
    Timer _realTime;                        // Time since last call to reset()
    Timer _renderTime;                      // Time spent rendering (per se)
    Timer _renderPassTimes[RENDER_PASS_COUNT];  // Time per render pass
};

#endif

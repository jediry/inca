/** -*- C++ -*-
 *
 * File: ImmediateModeRenderer-Viewport
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file defines the Viewport inner class belonging to
 *      ImmediateModeRenderer. A Viewport directly represents the active
 *      drawing region.
 *
 *      This file is not meant to be used directly, but is included by
 *      the main ImmediateModeRenderer header file.
 */

#ifndef INCA_RENDERING_IMMEDIATE_MODE_RENDERER_VIEWPORT
#define INCA_RENDERING_IMMEDIATE_MODE_RENDERER_VIEWPORT


// Import the Region definition
#include <inca/util/Region>


RENDERER_TEMPLATE
class RENDERER::Viewport
    : public RENDERER::Component,
      protected CachePolicy<API::FirstViewportProperty,
                            API::LastViewportProperty> {
/*---------------------------------------------------------------------------*
 | Constructor & destructor
 *---------------------------------------------------------------------------*/
public:
    // Constructor
    explicit Viewport(RENDERER & r) : Component(r, 0) { }

     // Destructor
    virtual ~Viewport() { }


/*---------------------------------------------------------------------------*
 | Viewport functions
 *---------------------------------------------------------------------------*/
public:
    const Region & bounds() const {
        SYNC_CACHE_AND_RETURN(API::ViewportBounds, Region, _bounds);
    }
    void setBounds(const Region & b) {
        WRITE_THRU_CACHE(API::ViewportBounds, Region, _bounds, b);
    }
    void setSizes(Dimension d) {
        // HACK -- this could be more efficient
        Region b = bounds();
        b.setSizes(d);
        setBounds(b);
    }

protected:
    mutable Region _bounds;


/*---------------------------------------------------------------------------*
 | Coordinate transformation functions
 *---------------------------------------------------------------------------*/
public:
    Point3D transform(const Point3D & p) const {
        const Region & b = bounds();
        Point3D s;
        s[0] = b.base(0) + b.size(0) * (p[0] + 1) / 2;
        s[1] = b.base(1) + b.size(1) * (p[1] + 1) / 2;
        s[2] = (p[2] + 1) / 2;
        return s;
    }
    Vector3D transform(const Vector3D & v) const {
        const Region & b = bounds();
        Vector3D s;
        s[0] = b.base(0) + b.size(0) * (v[0] + 1) / 2;
        s[1] = b.base(1) + b.size(1) * (v[1] + 1) / 2;
        s[2] = (v[2] + 1) / 2;
        return s;
    }
    Point3D untransform(const Point3D & s) const {
        const Region & b = bounds();
        Point3D p;
        p[0] = 2 * (s[0] - b.base(0)) / b.size(0) - 1;
        p[1] = 2 * (s[1] - b.base(1)) / b.size(1) - 1;
        p[2] = 2 * s[2] - 1;
        return p;
    }
    Vector3D untransform(const Vector3D & s) const {
        const Region & b = bounds();
        Vector3D v;
        v[0] = 2 * (s[0] - b.base(0)) / b.size(0) - 1;
        v[1] = 2 * (s[1] - b.base(1)) / b.size(1) - 1;
        v[2] = 2 * s[2] - 1;
        return v;
    }
};

#endif

/** -*- C++ -*-
 *
 * File: ImmediateModeRenderer-LightingUnit
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file defines the LightingUnit inner class belonging to
 *      ImmediateModeRenderer. A LightingUnit directly represents a
 *      hardware-accelerated light source.
 *
 *      This file is not meant to be used directly, but is included by
 *      the main ImmediateModeRenderer header file.
 */

#ifndef INCA_RENDERING_IMMEDIATE_MODE_RENDERER_LIGHTING_UNIT
#define INCA_RENDERING_IMMEDIATE_MODE_RENDERER_LIGHTING_UNIT


RENDERER_TEMPLATE
class RENDERER::LightingUnit
    : public RENDERER::Component,
      protected CachePolicy<API::FirstLightingUnitProperty,
                            API::LastLightingUnitProperty> {
public:
    // Constructor
    LightingUnit(RENDERER & r, IDType id) : Component(r, id) { }

    // XXX This needs more crap
    bool enabled() const {
        API::template getHardwareState<API::LightingUnitEnabled>(this->id(), _enabled);
        return _enabled;
    }
    void setEnabled(bool enabled) {
        API::template setHardwareState<API::LightingUnitEnabled>(this->id(), enabled);
    }

    void setPosition(const Point3D & p) {
        API::template setHardwareState<API::LightingUnitPosition>(this->id(), p);
    }
    void setAmbientColor(const Color & c) {
        API::template setHardwareState<API::LightingUnitAmbientColor>(this->id(), c);
    }
    void setDiffuseColor(const Color & c) {
        API::template setHardwareState<API::LightingUnitDiffuseColor>(this->id(), c);
    }
    void setSpecularColor(const Color & c) {
        API::template setHardwareState<API::LightingUnitSpecularColor>(this->id(), c);
    }

protected:
    mutable bool _enabled;
};

#endif

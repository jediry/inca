/** -*- C++ -*-
 *
 * File: ImmediateModeRenderer
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file declares the classes and functions for rendering objects in
 *      "immediate mode". In immediate mode, primitives (points, lines, curves,
 *      bezier patches, etc.) are rendered one-at-a-time using a local lighting
 *      model (as opposed to a global lighting model, such as in raytracing,
 *      which considers the entire scene as a whole for the purpose of
 *      calculating the lighting. Because an immediate-mode renderer can
 *      deal with primitives independently of one another, the renderer can be
 *      designed as a state-machine, such that the programmer sets the
 *      renderer's "current" attributes (transformation matrix stack, color,
 *      lighting mode, etc.) and then draws the primitives using the current
 *      state. DirectX and OpenGL are two examples of immediate mode
 *      rendering APIs.
 *
 *      Because of the sheer volume of code that makes up this structure and
 *      its subunits, it has been split up into logical chunks and implemented
 *      in separate files, which files are then included at the end of this
 *      one (which is the main file, in case you were wondering).
 *
 * Not implemented:
 *      Stipple, color-index mode, culling, poly offset, poly mode (f/b)
 */

#ifndef INCA_RENDERING_IMMEDIATE_MODE_RENDERER
#define INCA_RENDERING_IMMEDIATE_MODE_RENDERER

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca rendering subsystem
namespace inca {
    namespace rendering {
        // Forward declarations
        template <class APITraits, template <inca::SizeType> class CachePolicy>
            class ImmediateModeRenderer;
    };
};


// Import superclass definitions
//#include "../Renderer.hpp"
#include <boost/utility.hpp>

// Import rendering type definitions
#include "types.hpp"
#include "Primitive"


// Import container definitions
#include <vector>


// Make some REALLY long names shorter
#define RENDERER_TEMPLATE template <class API, template <inca::SizeType> class CachePolicy>
#define RENDERER inca::rendering::ImmediateModeRenderer<API, CachePolicy>


RENDERER_TEMPLATE
class inca::rendering::ImmediateModeRenderer
    : protected API, boost::noncopyable {
/*---------------------------------------------------------------------------*
 | Type definitions
 *---------------------------------------------------------------------------*/
public:
    // Geometric type definitions
    typedef typename API::geometry_t    geometry_t;
    typedef typename API::Point3D       Point3D;
    typedef typename API::Vector3D      Vector3D;
    typedef typename API::Quaternion    Quaternion;
    typedef typename API::Matrix        Matrix;
    typedef typename API::Normal        Normal;

    // Color type definitions
    typedef typename API::color_t       color_t;
    typedef typename API::Color         Color;

    // Texture coordinate type definitions
    typedef typename API::tex_coord_t   tex_coord_t;
    typedef typename API::TexCoord      TexCoord;
    
    // Screenspace type definitions
    typedef typename API::Pixel         Pixel;
    typedef typename API::Dimension     Dimension;

    // Timer type definitions
    typedef typename API::timer_t       timer_t;

    // Import world object types
    typedef world::Transform Transform;


// The following subcomponents are implemented in separate files, for the sake
// of keeping this code readable, and are included at the end of this file.
protected:
    class Component;        // Base class for subcomponents

public:
    class Rasterizer;       // The rasterizing engine state
    class Viewport;         // The active screen-drawing region
    class MatrixStack;      // A hardware matrix stack
    class TextureUnit;      // A hardware texture unit
    class LightingUnit;     // A hardware lighting unit
    template <typename element_t> class Buffer;     // A framebuffer part
        typedef Buffer<Color>       ColorBuffer;
        typedef Buffer<geometry_t>  ScalarBuffer;
        typedef Buffer<Color>       AccumulationBuffer;
        typedef Buffer<unsigned>    StencilBuffer;
    class Statistics;       // Performance statistics

    // We're all buddy-buddy with our sub-objects
    friend class Component;
    friend class Rasterizer;
    friend class Viewport;
    friend class MatrixStack;
    friend class TextureUnit;
    friend class LightingUnit;
    friend class ColorBuffer;
    friend class ScalarBuffer;
    friend class AccumulationBuffer;
    friend class StencilBuffer;
    friend class Statistics;


    // Container type definitions
    typedef std::vector<MatrixStack>    MatrixStackList;
    typedef std::vector<TextureUnit>    TextureUnitList;
    typedef std::vector<LightingUnit>   LightingUnitList;
    typedef std::vector<ColorBuffer>    ColorBufferList;
    typedef std::vector<ScalarBuffer>   ScalarBufferList;
    typedef std::vector<Statistics>     StatisticsList;


/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    // Constructor
    ImmediateModeRenderer();


/*---------------------------------------------------------------------------*
 | Renderer sub-objects
 *---------------------------------------------------------------------------*/
public:
    // Access to the rasterizer state
    Rasterizer & rasterizer();

    // Access to the drawable screen viewport
    Viewport & viewport();

    // Access to available hardware matrix stacks
    MatrixStack & projectionMatrix();
    MatrixStack & viewMatrix();
    MatrixStack & worldMatrix();
    MatrixStack & colorMatrix();

    // Access to available hardware buffers
    ColorBuffer & auxillaryBuffer(IndexType i);
    ScalarBuffer & depthBuffer();
    AccumulationBuffer & accumulationBuffer();
    StencilBuffer & stencilBuffer();

    // Performance & statistics
    Statistics & frameStatistics();
    Statistics & cumulativeStatistics();

protected:
    // Renderer sub-objects
    Rasterizer          _rasterizer;
    Viewport            _viewport;
    MatrixStackList     _matrixStacks;
    TextureUnitList     _textureUnits;
    LightingUnitList    _lightingUnits;
    ColorBufferList     _colorBuffers;
    ScalarBufferList    _scalarBuffers;
    StatisticsList      _statistics;


/*---------------------------------------------------------------------------*
 | Coordinate space transformation functions
 *---------------------------------------------------------------------------*/
public:
    // Transform between world and local coordinate spaces
    Point3D worldToLocal(const Point3D &world) const {
        return viewTransformation.transform(world);
    }
    Vector3D worldToLocal(const Vector3D &world) const {
        return viewTransformation.transform(world);
    }
    Point3D localToWorld(const Point3D &local) const {
        return viewTransformation.untransform(local);
    }
    Vector3D localToWorld(const Vector3D &local) const {
        return viewTransformation.untransform(local);
    }

    // Transform between world and screen coordinate spaces
    Point3D worldToScreen(const Point3D &world) const {
        return  viewport.transform(
                    projectionTransformation.transform(
                        viewTransformation.transform(world)
                    )
                );
    }
    Point3D screenToWorld(const Point3D &screen) const {
        return  viewTransformation.untransform(
                    projectionTransformation.untransform(
                        viewport.untransform(screen)
                    )
                );
    }


/*---------------------------------------------------------------------------*
 | Selection functions
 *---------------------------------------------------------------------------*/
public:
    void setSelectionID(IDType id) const;
    void pushSelectionID(IDType id) const;
    void popSelectionID() const;
//    void getSelectedIDs(world::SelectionSet &s) const;
};


// Import implementation of renderer sub-objects
#include "ImmediateModeRenderer-Component"
#include "ImmediateModeRenderer-Rasterizer"
#include "ImmediateModeRenderer-Viewport"
#include "ImmediateModeRenderer-MatrixStack"
#include "ImmediateModeRenderer-LightingUnit"
#include "ImmediateModeRenderer-TextureUnit"
#include "ImmediateModeRenderer-Buffer"
#include "ImmediateModeRenderer-Statistics"


// Clean up the preprocessor namespace
#undef RENDERER_TEMPLATE
#undef RENDERER

#endif

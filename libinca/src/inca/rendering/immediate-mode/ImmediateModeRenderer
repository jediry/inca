/** -*- C++ -*-
 *
 * File: ImmediateModeRenderer
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file declares the classes and functions for rendering objects in
 *      "immediate mode". In immediate mode, primitives (points, lines, curves,
 *      bezier patches, etc.) are rendered one-at-a-time using a local lighting
 *      model (as opposed to a global lighting model, such as in raytracing,
 *      which considers the entire scene as a whole for the purpose of
 *      calculating the lighting. Because an immediate-mode renderer can
 *      deal with primitives independently of one another, the renderer can be
 *      designed as a state-machine, such that the programmer sets the
 *      renderer's "current" attributes (transformation matrix stack, color,
 *      lighting mode, etc.) and then draws the primitives using the current
 *      state. DirectX and OpenGL are two examples of immediate mode
 *      rendering APIs.
 *
 *      Because of the sheer volume of code that makes up this structure and
 *      its subunits, it has been split up into logical chunks and implemented
 *      in separate files, which files are then included at the end of this
 *      one (which is the main file, in case you were wondering).
 *
 * Not implemented:
 *      Stipple, color-index mode, culling, poly offset, poly mode (f/b)
 */

#ifndef INCA_RENDERING_IMMEDIATE_MODE_RENDERER
#define INCA_RENDERING_IMMEDIATE_MODE_RENDERER

// Import system configuration
#include <inca/inca-common.h>

// This is part of the Inca rendering subsystem
namespace inca {
    namespace rendering {
        // Forward declarations
        template <class API, template <inca::IDType, inca::IDType> class CachePolicy>
            class ImmediateModeRenderer;
    };
};


// Import superclass definitions
//#include "../Renderer.hpp"
#include <boost/utility.hpp>

// Import rendering type definitions
#include "types.hpp"

// Import bounds checking utilities
#include <inca/util/OutOfBoundsException.hpp>

// Import container definitions
#include <vector>
#include <inca/util/FlagSet>


// Make some REALLY long names shorter
#define RENDERER_TEMPLATE template <class API, template <inca::IDType, inca::IDType> class CachePolicy>
#define RENDERER inca::rendering::ImmediateModeRenderer<API, CachePolicy>

// Import macros for renderer properties
#include "macros.hpp"


RENDERER_TEMPLATE
class inca::rendering::ImmediateModeRenderer
    : boost::noncopyable,
      protected CachePolicy<API::FirstRendererProperty,
                            API::LastRendererProperty> {
/*---------------------------------------------------------------------------*
 | Type definitions
 *---------------------------------------------------------------------------*/
public:
    static const int i = API::FirstRendererProperty;

    // Geometric type definitions
    typedef typename API::geometry_t    geometry_t;
    typedef typename API::Point3D       Point3D;
    typedef typename API::Vector3D      Vector3D;
    typedef typename API::Quaternion    Quaternion;
    typedef typename API::Matrix        Matrix;
    typedef typename API::Normal        Normal;

    // Color type definitions
    typedef typename API::color_t       color_t;
    typedef typename API::Color         Color;

    // Texture coordinate type definitions
    typedef typename API::tex_coord_t   tex_coord_t;
    typedef typename API::TexCoord      TexCoord;

    // Screenspace type definitions
    typedef typename API::Region        Region;
    typedef typename API::Pixel         Pixel;
    typedef typename API::Dimension     Dimension;

    // Timer type definitions
    typedef typename API::timer_t       timer_t;

    // Import world object types
    typedef world::Transform Transform;


// The following subcomponents are implemented in separate files, for the sake
// of keeping this code readable, and are included at the end of this file.
protected:
    class Component;        // Base class for subcomponents

public:
    class Rasterizer;       // The rasterizing engine state
    class Viewport;         // The active screen-drawing region
    class MatrixStack;      // A hardware matrix stack
    class LightingUnit;     // A hardware lighting unit
    class TexturingUnit;    // A hardware texturing unit
    template <typename ElementType> class Buffer;   // A framebuffer part
        typedef Buffer<Color>       ColorBuffer;
        typedef Buffer<geometry_t>  ScalarBuffer;
        typedef Buffer<Color>       AccumulationBuffer;
        typedef Buffer<unsigned>    StencilBuffer;
    class Statistics;       // Performance statistics

    // We're all buddy-buddy with our sub-objects
    friend class Component;
    friend class Rasterizer;
    friend class Viewport;
    friend class MatrixStack;
    friend class LightingUnit;
    friend class TexturingUnit;
    template <typename ElementType> friend class Buffer;
    friend class Statistics;


    // Container type definitions
    typedef std::vector<MatrixStack>    MatrixStackList;
    typedef std::vector<LightingUnit>   LightingUnitList;
    typedef std::vector<TexturingUnit>  TexturingUnitList;
    typedef std::vector<ColorBuffer>    ColorBufferList;
    typedef std::vector<ScalarBuffer>   ScalarBufferList;
    typedef std::vector<Statistics>     StatisticsList;


/*---------------------------------------------------------------------------*
 | Constructors
 *---------------------------------------------------------------------------*/
public:
    // Constructor
    explicit ImmediateModeRenderer() : _rasterizer(*this), _viewport(*this) {

        // Create the MatrixStack objects
        for (int i = 0; i < API::matrixStackCount(); ++i)
            _matrixStacks.push_back(MatrixStack(*this, API::matrixStackID(i)));

        // Create the LightingUnit objects
        for (int i = 0; i < API::lightingUnitCount(); ++i)
            _lightingUnits.push_back(LightingUnit(*this, API::lightingUnitID(i)));
        INCA_DEBUG(API::lightingUnitCount() << " lighting units")

        // Create the TexturingUnit objects
        for (int i = 0; i < API::texturingUnitCount(); ++i)
            _texturingUnits.push_back(TexturingUnit(*this, API::texturingUnitID(i)));

        // Create the Buffer objects
//        for (int i = 0; i < API::colorBufferCount(); ++i)
    }

    // Destructor
    virtual ~ImmediateModeRenderer() { }


/*---------------------------------------------------------------------------*
 | Renderer sub-objects & accessors
 *---------------------------------------------------------------------------*/
public:
    // Access to the rasterizer state
          Rasterizer & rasterizer()       { return _rasterizer; }
    const Rasterizer & rasterizer() const { return _rasterizer; }

    // Access to the drawable screen viewport
          Viewport & viewport()       { return _viewport; }
    const Viewport & viewport() const { return _viewport; }

    // Access to available hardware matrix stacks
    SizeType matrixCount() const { return _matrixStacks.size(); }
    MatrixStack & matrix(IndexType i) {
        INCA_BOUNDS_CHECK_LINEAR(_matrixStacks, i);
        return _matrixStacks[i];
    }
    const MatrixStack & matrix(IndexType i) const {
        INCA_BOUNDS_CHECK_LINEAR(_matrixStacks, i);
        return _matrixStacks[i];
    }
          MatrixStack & projectionMatrix()       { return matrix(API::projectionMatrixIndex()); }
    const MatrixStack & projectionMatrix() const { return matrix(API::projectionMatrixIndex()); }
          MatrixStack & viewMatrix()             { return matrix(API::viewMatrixIndex()); }
    const MatrixStack & viewMatrix() const       { return matrix(API::viewMatrixIndex()); }
          MatrixStack & worldMatrix()            { return matrix(API::worldMatrixIndex()); }
    const MatrixStack & worldMatrix() const      { return matrix(API::worldMatrixIndex()); }
          MatrixStack & colorMatrix()            { return matrix(API::colorMatrixIndex()); }
    const MatrixStack & colorMatrix() const      { return matrix(API::colorMatrixIndex()); }

    // Access to available lighting units
    SizeType lightingUnitCount() const { return _lightingUnits.size(); }
    LightingUnit & lightingUnit(IndexType i) {
        INCA_BOUNDS_CHECK_LINEAR(_lightingUnits, i);
        return _lightingUnits[i];
    }
    const LightingUnit & lightingUnit(IndexType i) const {
        INCA_BOUNDS_CHECK_LINEAR(_lightingUnits, i);
        return _lightingUnits[i];
    }

    // Access to available texturing units
    SizeType texturingUnitCount() const { return _texturingUnits.size(); }
    TexturingUnit & texturingUnit(IndexType i) {
        INCA_BOUNDS_CHECK_LINEAR(_texturingUnits, i);
        return _texturingUnits[i];
    }
    const TexturingUnit & texturingUnit(IndexType i) const {
        INCA_BOUNDS_CHECK_LINEAR(_texturingUnits, i);
        return _texturingUnits[i];
    }

    // Access to available hardware buffers
    SizeType colorBufferCount() const { return _colorBuffers.size(); }
    ColorBuffer & colorBuffer(IndexType i) {
        INCA_BOUNDS_CHECK_LINEAR(_colorBuffers, i);
        return _colorBuffers[i];
    }
    const ColorBuffer & colorBuffer(IndexType i) const {
        INCA_BOUNDS_CHECK_LINEAR(_colorBuffers, i);
        return _colorBuffers[i];
    }

    // Access to available scalar-valued buffers
//          ScalarBuffer & depthBuffer();
//    const ScalarBuffer & depthBuffer() const;

//           ColorBuffer & auxillaryBuffer(IndexType i);
//     const ColorBuffer & auxillaryBuffer(IndexType i) const;
//           AccumulationBuffer & accumulationBuffer();
//     const AccumulationBuffer & accumulationBuffer() const;
//           StencilBuffer & stencilBuffer();
//     const StencilBuffer & stencilBuffer() const;

    // Performance & statistics
    SizeType statisticsCount() const { return _statistics.size(); }
    Statistics & statistics(IndexType i) {
        INCA_BOUNDS_CHECK_LINEAR(_statistics, i);
        return _statistics[i];
    }
    const Statistics & statistics(IndexType i) const {
        INCA_BOUNDS_CHECK_LINEAR(_statistics, i);
        return _statistics[i];
    }
          Statistics & frameStatistics()       { return statistics(0); }
    const Statistics & frameStatistics() const { return statistics(0); }
          Statistics & cumulativeStatistics()       { return statistics(1); }
    const Statistics & cumulativeStatistics() const { return statistics(1); }

protected:
    // Renderer sub-objects
    Rasterizer          _rasterizer;
    Viewport            _viewport;
    MatrixStackList     _matrixStacks;
    TexturingUnitList   _texturingUnits;
    LightingUnitList    _lightingUnits;
    ColorBufferList     _colorBuffers;
    ScalarBufferList    _scalarBuffers;
    StatisticsList      _statistics;


/*---------------------------------------------------------------------------*
 | Frame auto-action control
 *---------------------------------------------------------------------------*/
public:
    // Do any frame-start actions
    void beginFrame() {
        if (autoClearBuffers())
            API::clearBuffers(autoClearBuffers());
    }

    // Do any frame-end actions
    void endFrame() { }

    // Is a particular buffer set to be auto-cleared?
    bool isAutoClearBuffer(IDType bufferID) const {
        return _autoClearBufferIDs.allSet(bufferID);
    }

    // Get/set all auto-clear buffers
    FlagSet<unsigned int> autoClearBuffers() const { return _autoClearBufferIDs; }
    void setAutoClearBuffers(unsigned int flags) { _autoClearBufferIDs = flags; }

    // Register a buffer to be auto-cleared
    void addAutoClearBuffer(IDType bufferID) {
        _autoClearBufferIDs.include(bufferID);
    }

    // Prevent a buffer from being auto-cleared
    void removeAutoClearBuffer(IDType bufferID, bool autoClear) {
        _autoClearBufferIDs.exclude(bufferID);
    }

protected:
    // This keeps track of which buffers should be cleared at each frame-start
    FlagSet<unsigned int> _autoClearBufferIDs;


/*---------------------------------------------------------------------------*
 | "Current" sub-object control
 *---------------------------------------------------------------------------*/
protected:
    void ensureCurrent(const MatrixStack & ms) {
        WRITE_THRU_CACHE(API::CurrentMatrixStack, IDType,
                         _currentMatrixStack, ms.id())
    }

    IDType _currentMatrixStack;


/*---------------------------------------------------------------------------*
 | Coordinate space transformation functions
 *---------------------------------------------------------------------------*/
public:
    // Transform between world and local coordinate spaces
    Point3D worldToLocal(const Point3D & world) const {
        return viewMatrix().transform(world);
    }
    Vector3D worldToLocal(const Vector3D & world) const {
        return viewMatrix().transform(world);
    }
    Point3D localToWorld(const Point3D & local) const {
        return viewMatrix().untransform(local);
    }
    Vector3D localToWorld(const Vector3D & local) const {
        return viewMatrix().untransform(local);
    }

    // Transform between local and screen coordinate spaces
    Point3D localToScreen(const Point3D & local) const {
        return  viewport().transform(
                    projectionMatrix().transform(local)
                );
    }
    Point3D screenToLocal(const Point3D & screen) const {
        return  projectionMatrix().untransform(
                    viewport().untransform(screen)
                );
    }

    // Transform between world and screen coordinate spaces
    Point3D worldToScreen(const Point3D & world) const {
        return localToScreen(worldToLocal(world));
    }
    Point3D screenToWorld(const Point3D & screen) const {
        return screenToLocal(localToWorld(screen));
    }


/*---------------------------------------------------------------------------*
 | Selection functions
 *---------------------------------------------------------------------------*/
public:
    void setSelectionID(IDType id) const;
    void pushSelectionID(IDType id) const;
    void popSelectionID() const;
//    void getSelectedIDs(world::SelectionSet &s) const;
};


// Import implementation of renderer sub-objects
#include "ImmediateModeRenderer-Component"
#include "ImmediateModeRenderer-Rasterizer"
#include "ImmediateModeRenderer-Viewport"
#include "ImmediateModeRenderer-MatrixStack"
#include "ImmediateModeRenderer-LightingUnit"
#include "ImmediateModeRenderer-TexturingUnit"
#include "ImmediateModeRenderer-Buffer"
#include "ImmediateModeRenderer-Statistics"


// Clean up the preprocessor namespace
#undef RENDERER_TEMPLATE
#undef RENDERER

#endif

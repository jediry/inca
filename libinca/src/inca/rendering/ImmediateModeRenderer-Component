/** -*- C++ -*-
 *
 * File: ImmediateModeRenderer-Component
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file defines the Component inner class belonging to
 *      ImmediateModeRenderer. Component is the base class for all of the
 *      other sub-components of ImmediateModeRenderer.
 *
 *      All renderer subcomponents have a reference back to the parent
 *      ImmediateModeRenderer object (needed to get access to the underlying
 *      API context) and a generic unsigned int "id" value, representing a
 *      handle or pointer to the corresponding API-specific resource (the
 *      API-specific header files will provide macros for casting these values
 *      to the actual correct type).
 *
 *      This file is not meant to be used directly, but is included by
 *      the main ImmediateModeRenderer header file.
 */

#ifndef INCA_RENDERING_IMMEDIATE_MODE_RENDERER_COMPONENT
#define INCA_RENDERING_IMMEDIATE_MODE_RENDERER_COMPONENT

    typedef boost::array<CacheEntry<bool>,  APITraits::numBoolProperties>
        BoolPropertyCache;
    typedef boost::array<CacheEntry<int>,   APITraits::numIntProperties>
        IntPropertyCache;
    typedef boost::array<CacheEntry<float>, APITraits::numFloatProperties>
        FloatPropertyCache;
    typedef boost::array<CacheEntry<double>,APITraits::numDoubleProperties>
        DoublePropertyCache;
    typedef boost::array<CacheEntry<Color>, APITraits::numColorProperties>
        ColorPropertyCache;

    // Property caching mechanism
    template <typename T>
    class CacheEntry {
    public:
        // Constructor
        CacheEntry(const T & val = T(), bool isValid = false)
            : value(val), valid(isValid) { }

        T value;    // The cached value
        bool valid; // Is this cache entry current with the hardware?
    };

    
        // Property caches
    mutable BoolPropertyCache   boolPropertyCache;
    mutable IntPropertyCache    intPropertyCache;
    mutable FloatPropertyCache  floatPropertyCache;
    mutable DoublePropertyCache doublePropertyCache;
    mutable ColorPropertyCache  colorPropertyCache;

RENDERER_TEMPLATE
class RENDERER::Component {
public:
    // Constructor
    Component(RENDERER &r, id_t myID) : renderer(r), id(myID), valid(false) { }

protected:
    RENDERER &renderer;     // Daddy!
    id_t id;                // API-specific handle/pointer
    bool valid;             // Are we synchronized with the hardware state?
};

#endif
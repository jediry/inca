/*
 * File: statistic
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file implements
 */

#ifndef INCA_RASTER_OPERATORS_STATISTIC
#define INCA_RASTER_OPERATORS_STATISTIC


// Import apply-functor raster algorithm
#include "../algorithms/apply"

// Import metaprogramming tools
#include <inca/util/metaprogramming/macros.hpp>


// This is part of the Inca raster processing library
namespace inca {
    namespace raster {

        // Sum of all elements
        template <typename T>
        class Sum {
        public:
            typedef T                       ElementType;

            // Default constructor
            Sum() : _sum(ElementType(0)) { }

            // Function call operator
            void operator()(const ElementType & t) {
                _sum += t;
            }

            // Result accessor functions
            const ElementType & sum() const { return _sum; }

        protected:
            ElementType _sum;      // Our running total
        };

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) sum(const R0 & r) {
            typedef typename R0::ElementType T;
            Sum<T> s;               // Create the summation functor
            s = apply(s, r);        // Apply it to the raster
            return s.sum();         // Return its output
        }

        // Min/max range measurement
        template <typename T>
        class Range {
        public:
            typedef T                       ElementType;
            typedef Array<ElementType, 2>   ElementArray;

            // Default constructor
            Range() : _minMax(ElementType(0)), initialized(false) { }

            // Function call operator
            void operator()(const ElementType & t) {
                if (! initialized) {
                    _minMax[0] = _minMax[1] = t;
                    initialized = true;
                } else if (t < _minMax[0]) {
                    _minMax[0] = t;
                } else if (t > _minMax[1]) {
                    _minMax[1] = t;
                }
            }

            // Result accessor functions
            const ElementType & min() const { return _minMax[0]; }
            const ElementType & max() const { return _minMax[1]; }
            const Array<ElementType, 2> & range() const { return _minMax; }

        protected:
            bool initialized;       // Do we have valid values?
            ElementArray _minMax;   // Our current min and max
        };

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        Array<typename R0::ElementType COMMA 2> ) range(const R0 & r) {
            typedef typename R0::ElementType T;
            Range<T> minmax;    // Create the range-measurement functor
            minmax = apply(minmax, r);   // Apply it to the raster
            return minmax.range();   // Return its output (cast to array)
        }

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) min(const R0 & r) {
            typedef typename R0::ElementType T;
            Range<T> minmax;    // Create the range-measurement functor
            minmax = apply(minmax, r);   // Apply it to the raster
            return minmax.min();   // Return its output (cast to scalar)
        }

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) max(const R0 & r) {
            typedef typename R0::ElementType T;
            Range<T> minmax;    // Create the range-measurement functor
            minmax = apply(minmax, r);   // Apply it to the raster
            return minmax.max();   // Return its output (cast to scalar)
        }


        // Calculation of all power means up to 'power'
        template <typename T, int power = 1>
        class Mean {
        public:
            typedef T                               ElementType;
            typedef Array<ElementType, power + 1>   ElementArray;

            // Default constructor (T must be default constructible)
            Mean() : sums(ElementType(0)), _count(0), evaluated(false) { }

            // Unary function call operator
            void operator()(const ElementType & t) {
                ElementType product = t;
                sums[1] += product;
                for (int i = 2; i < sums.size(); ++i) {
                    product *= t;
                    sums[i] += product;
                }
                ++_count;
            }

            // Result accessor functions
            const ElementArray & means() const {
                evaluate();
                return _means;
            }
            const ElementType & mean(int pwr) const {
                evaluate();
                return _means[pwr];
            }

            int count() const { return _count; }

        protected:
            void evaluate() const {
                if (! evaluated) {
                    for (int i = 1; i < sums.size(); ++i)
                        if (count() == 0)   _means[i] = T(0);
                        else                _means[i] = T(std::pow(sums[i] / count(), 1.0f / i));
                    evaluated = true;
                }
            }
            mutable bool evaluated;         // Have we solved it already?
            mutable ElementArray _means;    // The answer
            ElementArray sums;              // Running sums of powers
            int _count;                     // Running count of elements
        };

        // Simplifying macro
        #define MEAN(POWER) {                                               \
            Mean<typename R0::ElementType, POWER> M;       /* Create mean-measurement functor  */  \
            M = apply(M, r);        /* Apply it to the raster           */  \
            return M.mean(POWER);   /* Return output (cast to T)        */  \
        }
        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) mean(const R0 & r) {
            typedef typename R0::ElementType T;
            MEAN(1);
        }

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) rms(const R0 & r) {
            typedef typename R0::ElementType T;
            MEAN(2);
        }

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) mean(const R0 & r, int power) {
            typedef typename R0::ElementType T;
            switch (power) {
                case 1: MEAN(1);
                case 2: MEAN(2);
                case 3: MEAN(3);
                case 4: MEAN(4);
                case 5: MEAN(5);
                case 6: MEAN(6);
                case 7: MEAN(7);
                case 8: MEAN(8);
                case 9: MEAN(9);
                default:
                    cerr << "mean(R, " << power << "): power exceeded limit\n";
            }
        }


        template <class R0, int power>
        ENABLE_IF_T( is_raster<R0>,
        typename Mean<typename R0::ElementType COMMA power>::ElementArray )
        means(const R0 & r) {
            typedef typename R0::ElementType T;
            Mean<T, power> M;
            M = apply(M, r);
            return M.means();
        }

        // Clean up preprocessor namespace
        #undef MEAN


        // Calculation of all power moments up to 'power' about a center point
        template <typename T, int power = 1>
        class Moment {
        public:
            typedef T                               ElementType;
            typedef Array<ElementType, power + 1>   ElementArray;

            // Default constructor (T must be default constructible)
            Moment(const ElementType & _center) : center(_center),
                sums(ElementType(0)), count(0), evaluated(false) { }

            // Unary function call operator
            void operator()(const ElementType & t) {
                ElementType diff = t - center;
                ElementType product = diff;
                sums[1] += product;
                for (int i = 2; i < sums.size(); ++i) {
                    product *= diff;
                    sums[i] += product;
                }
                ++count;
            }

            // Result accessor functions
            const ElementArray & moments() const {
                evaluate();
                return _moments;
            }
            const ElementType & moment(int pwr) const {
                evaluate();
                return _moments[pwr];
            }

        protected:
            void evaluate() const {
                if (! evaluated) {
                    for (int i = 0; i < sums.size(); ++i)
                        if (count == 0)     _moments[i] = T(0);
                        else                _moments[i] = sums[i] / count;
                    evaluated = true;
                }
            }
            mutable bool evaluated;         // Have we solved it already?
            mutable ElementArray _moments;  // The answer
            ElementType center;             // What we're "momenting" around
            ElementArray sums;              // Running sums of powers
            int count;                      // Running count of elements
        };


        // Simplifying macro
        #define MOMENT(POWER) {                                             \
            Mean<T, POWER> M;       /* Create moment-measurement functor  */\
            M = apply(M, r);        /* Apply it to the raster           */  \
            return M.moment(POWER); /* Return output (cast to T)        */  \
        }
        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) moment(const R0 & r) {
            typedef typename R0::ElementType T;
            MOMENT(1);
        }

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) variance(const R0 & r) {
            typedef typename R0::ElementType T;
            MOMENT(2);
        }

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) stddev(const R0 & r) {
            return sqrt(variance(r));
        }

        template <class R0>
        ENABLE_IF_T( is_raster<R0>,
        typename R0::ElementType ) moment(const R0 & r, int power) {
            typedef typename R0::ElementType T;
            switch (power) {
                case 1: MOMENT(1);
                case 2: MOMENT(2);
                case 3: MOMENT(3);
                case 4: MOMENT(4);
                case 5: MOMENT(5);
                case 6: MOMENT(6);
                case 7: MOMENT(7);
                case 8: MOMENT(8);
                case 9: MOMENT(9);
                default:
                    cerr << "moment(R, " << power << "): power exceeded limit\n";
            }
        }

        template <class R0, int power>
        ENABLE_IF_T( is_raster<R0>,
        typename Moment<typename R0::ElementType COMMA power>::ElementArray )
        moments(const R0 & r, const typename R0::ElementType & center) {
            typedef typename R0::ElementType T;
            Moment<T, power> M(center);
            M = apply(M, r);
            return M.moments();
        }

        // Clean up preprocessor namespace
        #undef MOMENT

    };
};

// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_METAPROGRAMMING_MACROS
#include <inca/util/metaprogramming/macros.hpp>

#endif

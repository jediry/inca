/*
 * File: rotate
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 * FIXME: This ought to calculate the actual bounds of the rotation.
 */

#ifndef INCA_RASTER_OPERATOR_ROTATE
#define INCA_RASTER_OPERATOR_ROTATE


// Import operator base classes and macros
#include "OperatorRasterBase"

// Import metaprogramming tools
#include <inca/util/multi-dimensional-macros.hpp>
#include <inca/util/metaprogramming/macros.hpp>


// This is part of the Inca raster processing library
namespace inca {
    namespace raster {

        // Rotate a raster around a point
        INCA_RASTER_OPERATOR_CLASS_HEADER(RotateOperatorRaster,
                                          1, ((typename, Scalar), NIL),
                                          typename R0::ElementType ) {
        public:
            // Get types from the superclass
            INCA_RASTER_OPERATOR_IMPORT_TYPES(RotateOperatorRaster<R0 COMMA Scalar>)
            typedef math::Vector<Scalar, R0::dimensionality>    Vector;
            typedef math::Point<Scalar,  R0::dimensionality>    Point;


            // Constructor giving transform rotation amount and center point
            template <class ScalarList1, class ScalarList2>
            explicit RotateOperatorRaster(const R0 & r, Scalar angle,
                                          const ScalarList1 & axis,
                                          const ScalarList2 & center)
                    : OperatorBaseType(r, true),
                      rotationAngle(-angle),
                      rotationAxis(axis),
                      centerPoint(center) {
                // Total HACK
                this->_bounds.expand(10);
            }

        protected:
            // Element evaluator function
            INCA_RASTER_OPERATOR_GET_ELEMENT_HEADER(indices) {
                Point p;
                for (IndexType d = 0; d < dimensionality; ++d)
                    p[d] = Scalar(indices[d]);
                Point rotated(math::rotate(p, rotationAngle, rotationAxis, centerPoint));
                
                // TODO: Need some way of controlling the interpolation scheme
                // HACK: this is only applicable to 2D!
                // Calculate the linear interpolation at this point
                IndexArray idx(rotated);
                Scalar t(rotated[0] - idx[0]);
                Scalar s(rotated[1] - idx[1]);
                ElementType ll(operand0(idx));
                idx[0]++;
                ElementType lr(operand0(idx));
                idx[1]++;
                ElementType ur(operand0(idx));
                idx[0]--;
                ElementType ul(operand0(idx));
                ElementType result = (ll * (1-t) + lr * t) * (1-s) + (ul * (1-t) + ur * t) * s;
                return result;
            }

            // Transformation parameters
            Scalar rotationAngle;
            Vector rotationAxis;
            Point  centerPoint;
        };


        // Factory function taking 2D raster and rotation angle, about the
        // center-point of the raster
        template <typename R0, typename Scalar>
        ENABLE_IF_T( AND2( is_raster<R0>,
                           EQUAL( raster_dimensionality<R0>, INT(2) ) ),
        RotateOperatorRaster<R0 COMMA Scalar> ) rotate(const R0 & r,
                                                       const Scalar & angle) {
            typedef RotateOperatorRaster<R0, Scalar> Rotate;
            // HACK: This needs a fix to the Point converting constructors
            typename Rotate::Point center(r.bounds().center(0), r.bounds().center(1));
            typename Rotate::Vector axis(Scalar(0));
            return Rotate(r, angle, axis, center);
        }

        // Factory function taking N-D raster, rotation angle and center
        template <typename R0, typename Scalar, typename ScalarList>
        ENABLE_IF_T( is_raster<R0>,
        RotateOperatorRaster<R0 COMMA Scalar> ) rotate(const R0 & r,
                                                       const Scalar & angle,
                                                       const ScalarList & center) {
            typedef RotateOperatorRaster<R0, Scalar> Rotate;
            typename Rotate::Vector axis(Scalar(0));
            axis[0] = Scalar(1);
            return Rotate(r, angle, axis, center);
        }

        // Factory function taking N-D raster, rotation angle, axis and center
        template <typename R0, typename Scalar, typename ScalarList>
        ENABLE_IF_T( is_raster<R0>,
        RotateOperatorRaster<R0 COMMA Scalar> ) rotate(const R0 & r,
                                                       const Scalar & angle,
                                                       const ScalarList & axis,
                                                       const ScalarList & center) {
            typedef RotateOperatorRaster<R0, Scalar> Rotate;
            return Rotate(r, angle, axis, center);
        }

    };
};


// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_MULTI_DIM_MACROS
#include <inca/util/multi-dimensional-macros.hpp>
#define UNDEFINE_INCA_METAPROGRAMMING_MACROS
#include <inca/util/metaprogramming/macros.hpp>

#endif

/** -*- C++ -*-
 *
 * File: gradient
 *
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file implements a gradient operator that calculates a forward
 *      finite difference gradient returned as a raster of inca::math::Vectors
 *      of the input type.
 */

#ifndef INCA_RASTER_OPERATOR_GRADIENT
#define INCA_RASTER_OPERATOR_GRADIENT


// Import operator base class and macros
#include "OperatorRasterBase"

// Import the Vector class
#include <inca/math/linalg.hpp>

// Import metaprogramming tools
#include <inca/util/metaprogramming/is_collection.hpp>
#include <inca/util/multi-dimensional-macros.hpp>
#include <inca/util/metaprogramming/macros.hpp>


// This is part of the Inca raster processing library
namespace inca {
    namespace raster {

        // Gradient operator
        INCA_RASTER_OPERATOR_CLASS_HEADER(GradientOperatorRaster,
                                          1, NIL,
                                          math::Vector<typename R0::ElementType COMMA
                                                                R0::dimensionality> ) {
        public:
            // Get types from the superclass
            INCA_RASTER_OPERATOR_IMPORT_TYPES(GradientOperatorRaster<R0>)
            typedef float Scalar;

            // Constructor taking differential distances along each dimension
            template <class ElementList>
            GradientOperatorRaster(const R0 & r, const ElementList & dx)
                    : OperatorBaseType(r) {
                // Calculate the scale factors along each dimension
                typename ElementList::const_iterator it = dx.begin();
                for (IndexType d = 0; d < dimensionality; ++d)
                    scaleFactors[d] = Scalar(1) / (2 * (*it));
            }


        protected:
            // Element evaluator function
            INCA_RASTER_OPERATOR_GET_ELEMENT_HEADER(indices) {
/*                IndexArray idx(indices);
                ElementType result;
                typename R0::ElementType center = operand0(idx);   // cell at idx
                for (IndexType d = 0; d < dimensionality; ++d) {
                    idx[d]++;       // Move to adjacent element along this dim
                    result[d] = (operand0(idx) - center) * scaleFactors[d];
                    idx[d]--;       // Return to center element
                }*/
                IndexArray idx(indices);
                ElementType result;
                for (IndexType d = 0; d < dimensionality; ++d) {
                    ++idx[d];       // Move to up-adjacent element along this dim
                    result[d] = operand0(idx);
                    idx[d] -= 2;    // Move to down-adjacent element
                    result[d] -= operand0(idx);
                    result[d] *= scaleFactors[d];
                    ++idx[d];       // Return to the center
                }
                return result;
            }

            // The world-space distance between elements
            ElementType scaleFactors;
        };


        // Factory function for unity differentials
        template <typename R0>
        GradientOperatorRaster<R0> gradient(const R0 & r) {
            typedef GradientOperatorRaster<R0> Op;
            return Op(r, typename Op::ElementType(typename R0::ElementType(1)));
        }

        // Factory function for uniform differentials
        template <typename R0, typename Scalar>
        DISABLE_IF_T( is_collection<Scalar>,
        GradientOperatorRaster<R0> ) gradient(const R0 & r, const Scalar & dx) {
            typedef GradientOperatorRaster<R0> Op;
            return Op(r, typename Op::ElementType(typename R0::ElementType(dx)));
        }

        // Factory function specifying differentials for each dimension
        template <typename R0, class ElementList>
        ENABLE_IF_T( is_collection<ElementList>,
        GradientOperatorRaster<R0> ) gradient(const R0 & r, const ElementList & dx) {
            return GradientOperatorRaster<R0>(r, dx);
        }

    };
};


// Clean up the preprocessor's namespace
#define UNDEFINE_INCA_MULTI_DIM_MACROS
#include <inca/util/multi-dimensional-macros.hpp>
#define UNDEFINE_INCA_METAPROGRAMMING_MACROS
#include <inca/util/metaprogramming/macros.hpp>

#endif

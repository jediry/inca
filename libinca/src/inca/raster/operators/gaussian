/*
 * File: gaussian
 * 
 * Author: Ryan L. Saunders
 *
 * Copyright 2004, Ryan L. Saunders. All rights reserved.
 *
 * Description:
 *      This file implements a raster generator function for an n-dimensional
 *      Gaussian shape, centered at a point with a certain width in each
 *      direction.
 */

#ifndef INCA_RASTER_OPERATORS_GAUSSIAN
#define INCA_RASTER_OPERATORS_GAUSSIAN


// Import operator base classes and macros
#include "operator-bases"

// Import the Vector class
#include <inca/math/linalg.hpp>

// This is part of the Inca raster processing library
namespace inca {
    namespace raster {

        // Gaussian shape generator
        template <typename scalar, inca::SizeType dim>
        class GaussianRasterGenerator
                    : public ArbitrarySizeRasterTag {
        public:
            static const SizeType dimensionality = dim;

            typedef scalar scalar_t;
            typedef GaussianRasterGenerator<scalar_t, dimensionality>   OperatorType;
            typedef scalar              ElementType;
            typedef Array<ElementType, dimensionality> ScalarArray;
            
            // Constructor
            template <class ScalarList1, class ScalarList2>
            GaussianRasterGenerator(const ScalarList1 & c,
                                    const ScalarList2 & s)
                    : center(c), standardDeviation(s) {
                ElementType sqrt2PI = ElementType(std::sqrt(2 * M_PI));
                scalingConstant = 1;
                for (IndexType d = 0; d < dimensionality; ++d)
                    scalingConstant /= standardDeviation[d] * sqrt2PI;
            }

            // Evaluator function
            template <class IndexList>
            ElementType operator()(const IndexList &indices) const {
                ElementType exponent = 0;
                for (IndexType d = 0; d < dimensionality; ++d) {
                    ElementType dx = (indices[d] - center[d])
                                   / (2 * standardDeviation[d]);
                    exponent += dx * dx;
                }
                return scalingConstant * std::exp(-exponent);
            }

            // HACK!
            Array<IndexType, dimensionality> bases() const { return Array<int, dimensionality>(-10000); }
            IndexType base(IndexType d) const { return bases()[d]; }
            Array<IndexType, dimensionality> extents() const { return Array<int, dimensionality>(10000); }
            IndexType extent(IndexType d) const { return extents()[d]; }
        protected:
            ScalarArray center, standardDeviation;
            ElementType scalingConstant;
        };


        // Factory function
        template <class scalar, SizeType dim>
        GaussianRasterGenerator<typename scalar, dim>
        gaussian(const Array<scalar, dim> & center, const Array<scalar, dim> & stddev) {
            return GaussianRasterGenerator<scalar, dim>(center, stddev);
        }

    };
};

#endif

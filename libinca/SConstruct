#! /usr/bin/env python
import os

"""
help       -> scons -h
compile    -> scons
clean      -> scons -c
install    -> scons install
uninstall  -> scons -c install
configure  -> scons configure prefix=/tmp/ita debug=full extraincludes=/usr/local/include:/tmp/include prefix=/usr/local

Run from a subdirectory -> scons -u
The variables are saved automatically after the first run (look at cache/kde.cache.py, ..)
"""


class AutoConfigurator:
    "A more autoconf-like Configure"


    # Mappings of name -> True/False indicating whether the entity was found
    headers = {}
    libs = {}


    def __init__(self, conf):
        self.configure = conf

    def CheckHeader(self, header):
        self.headers[header] = self.configure.CheckHeader(header)
        return self.headers[header]

    def CheckCXXHeader(self, header):
        self.headers[header] = self.configure.CheckCXXHeader(header)
        return self.headers[header]

    def CheckLib(self, lib):
        self.libs[lib] = self.configure.CheckLib(lib)
        return self.libs[lib]

    def RequireHeader(self, header, msg = None):
        if not self.CheckHeader(header):
            if msg != None:
                print msg
            else:
                print "Failed to locate required header '$lib'"
            Exit(1)

    def RequireCXXHeader(self, header, msg = None):
        if not self.CheckCXXHeader(header):
            if msg != None:
                print msg
            else:
                print "Failed to locate required header '$lib'"
            Exit(1)

    def RequireLib(self, lib, msg = None):
        if not self.CheckLib(lib):
            if msg != None:
                print msg
            else:
                print "Failed to locate required lib '$lib'"
            Exit(1)

    def MakePreprocessorIdentifier(self, name):
        "Convert 'name' into a C preprocessor-safe identifier"
        import re
        return 'HAVE_' + re.sub('[^A-Z0-9_]', '_', name.upper())

    def GenerateConfigHeader(self, header):
        print "Generating " + header

        import datetime
        config_h = file(str(header), "w")
#        date = datetime.datetime.now().strftime("%a, %d %b %Y %H:%M:%S")
        config_h.write("/* " + header + "\n" \
                       " *\n" \
#                       " * Generated by AutoConfigurator at " + date + "\n" \
                       " * This file is generated automatically. Do not edit it, as your\n" \
                       " * changes may be lost.\n" \
                       " */\n" \
                       "\n")

        for header, result in self.headers.iteritems():
            cpp_symbol = self.MakePreprocessorIdentifier(header)
            if result:
                config_h.write("#define " + cpp_symbol + " 1\n")
            else:
                config_h.write("//#undef " + cpp_symbol + "\n")

        for lib, result in self.libs.iteritems():
            cpp_symbol = self.MakePreprocessorIdentifier('lib' + lib)
            if result:
                config_h.write("#define " + cpp_symbol + " 1\n")
            else:
                config_h.write("//#undef " + cpp_symbol + "\n")

        config_h.close()


###################################################################
# LOAD THE ENVIRONMENT AND SET UP THE TOOLS
###################################################################

buildDir = 'build'
env = Environment(tools=['default', 'generic', 'doxygen'], toolpath=['./tools'])
env.BuildDir(buildDir, 'src', duplicate = 0)
if not os.path.isdir(buildDir):
    os.makedirs(buildDir)

if not env.GetOption('clean'):

    ## Examine the system configuration
    conf = Configure(env)

    autoConf = AutoConfigurator(conf)

    autoConf.CheckHeader('sys/time.h')
    autoConf.CheckHeader('time.h')

    autoConf.CheckCXXHeader('hash_map')
    autoConf.CheckCXXHeader('ext/hash_map')

    autoConf.RequireCXXHeader('boost/shared_ptr.hpp')

    autoConf.CheckHeader('GL/gl.h')
    autoConf.CheckHeader('GL/glu.h')
    autoConf.CheckLib('GL')
    autoConf.CheckLib('GLU')

    autoConf.CheckHeader('fftw3.h')
    autoConf.CheckLib('fftw3f')

    autoConf.RequireCXXHeader('Magick++.h')
    autoConf.RequireLib('Magick++')

    autoConf.CheckHeader('FreeImage.h')
    autoConf.CheckLib('freeimage')

    env = conf.Finish()

    autoConf.GenerateConfigHeader(buildDir + '/config-ac.h')

env.BuildDir(buildDir, 'src', duplicate = 0)


###################################################################
# SCRIPTS FOR BUILDING THE TARGETS
###################################################################

Export('env')
env.SConscript('src/SConscript', build_dir=buildDir)


###################################################################
# CONVENIENCE FUNCTIONS TO EMULATE 'make dist' and 'make distclean'
###################################################################

### To make a tarball of your masterpiece, use 'scons dist'
if 'dist' in COMMAND_LINE_TARGETS:

	## The target scons dist requires the python module shutil which is in 2.3
	env.EnsurePythonVersion(2, 3)

	import os
	APPNAME = 'bksys'
	VERSION = os.popen("cat VERSION").read().rstrip()
	FOLDER  = APPNAME+'-'+VERSION
	ARCHIVE = FOLDER+'.tar.bz2'

	## If your app name and version number are defined in 'version.h', use this instead:
	## (contributed by Dennis Schridde devurandom@gmx@net)
	#import re
	#INFO = dict( re.findall( '(?m)^#define\s+(\w+)\s+(.*)(?<=\S)', open(r"version.h","rb").read() ) )
	#APPNAME = INFO['APPNAME']
	#VERSION = INFO['VERSION']

	import shutil
	import glob

	## check if the temporary directory already exists
	if os.path.isdir(FOLDER):
		shutil.rmtree(FOLDER)
	if os.path.isfile(ARCHIVE):
		os.remove(ARCHIVE)

	## create a temporary directory
	startdir = os.getcwd()
	shutil.copytree(startdir, FOLDER)

	## remove our object files first
	os.popen("find "+FOLDER+" -name \"*cache*\" | xargs rm -rf")
	os.popen("find "+FOLDER+" -name \"*.pyc\" | xargs rm -f")
	#os.popen("pushd %s && scons -c " % FOLDER) # TODO

	## CVS cleanup
	os.popen("find "+FOLDER+" -name \"CVS\" | xargs rm -rf")
	os.popen("find "+FOLDER+" -name \".cvsignore\" | xargs rm -rf")

	## Subversion cleanup
	os.popen("find %s -name .svn -type d | xargs rm -rf" % FOLDER)

	## GNU Arch cleanup
	os.popen("find "+FOLDER+" -name \"{arch}\" | xargs rm -rf")
	os.popen("find "+FOLDER+" -name \".arch-i*\" | xargs rm -rf")

	## Create the tarball (coloured output)
	print "\033[92m"+"Writing archive "+ARCHIVE+"\033[0m"
	os.popen("tar cjf "+ARCHIVE+" "+FOLDER)

	## Remove the temporary directory
	if os.path.isdir(FOLDER):
		shutil.rmtree(FOLDER)

	env.Default(None)
	env.Exit(0)


### Emulate "make distclean"
if 'distclean' in COMMAND_LINE_TARGETS:
	## Remove the cache directory
	import os, shutil
	if os.path.isdir(env['CACHEDIR']):
		shutil.rmtree(env['CACHEDIR'])
	os.popen("find . -name \"*.pyc\" | xargs rm -rf")

	env.Default(None)
	env.Exit(0)

